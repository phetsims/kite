// Copyright 2017-2023, University of Colorado Boulder

/**
 * Shape tests
 *
 * @author Jonathan Olson (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Bounds2 from '../../dot/js/Bounds2.js';
import Matrix3 from '../../dot/js/Matrix3.js';
import Ray2 from '../../dot/js/Ray2.js';
import Vector2 from '../../dot/js/Vector2.js';
import { Arc, Cubic, EllipticalArc, Line, Quadratic, Shape, Subpath } from './imports.js';

QUnit.module( 'Shape' );

function dataToCanvas( snapshot ) {

  const canvas = document.createElement( 'canvas' );
  canvas.width = snapshot.width;
  canvas.height = snapshot.height;
  const context = canvas.getContext( '2d' );
  context.putImageData( snapshot, 0, 0 );
  $( canvas ).css( 'border', '1px solid black' );
  return canvas;
}

// compares two pixel snapshots {ImageData} and uses the qunit's assert to verify they are the same
function dataEquals( assert, a, b, threshold, message, extraDom ) {

  let isEqual = a.width === b.width && a.height === b.height;
  let largestDifference = 0;
  let totalDifference = 0;
  const colorDiffData = document.createElement( 'canvas' ).getContext( '2d' ).createImageData( a.width, a.height );
  const alphaDiffData = document.createElement( 'canvas' ).getContext( '2d' ).createImageData( a.width, a.height );
  if ( isEqual ) {
    for ( let i = 0; i < a.data.length; i++ ) {
      const diff = Math.abs( a.data[ i ] - b.data[ i ] );
      if ( i % 4 === 3 ) {
        colorDiffData.data[ i ] = 255;
        alphaDiffData.data[ i ] = 255;
        alphaDiffData.data[ i - 3 ] = diff; // red
        alphaDiffData.data[ i - 2 ] = diff; // green
        alphaDiffData.data[ i - 1 ] = diff; // blue
      }
      else {
        colorDiffData.data[ i ] = diff;
      }
      const alphaIndex = ( i - ( i % 4 ) + 3 );
      // grab the associated alpha channel and multiply it times the diff
      const alphaMultipliedDiff = ( i % 4 === 3 ) ? diff : diff * ( a.data[ alphaIndex ] / 255 ) * ( b.data[ alphaIndex ] / 255 );

      totalDifference += alphaMultipliedDiff;
      // if ( alphaMultipliedDiff > threshold ) {
      // console.log( message + ': ' + Math.abs( a.data[i] - b.data[i] ) );
      largestDifference = Math.max( largestDifference, alphaMultipliedDiff );
      // isEqual = false;
      // break;
      // }
    }
  }
  const averageDifference = totalDifference / ( 4 * a.width * a.height );
  if ( averageDifference > threshold ) {
    const display = $( '#display' );
    // header
    const note = document.createElement( 'h2' );
    $( note ).text( message );
    display.append( note );
    const differenceDiv = document.createElement( 'div' );
    $( differenceDiv ).text( `(actual) (expected) (color diff) (alpha diff) Diffs max: ${largestDifference}, average: ${averageDifference}` );
    display.append( differenceDiv );

    display.append( dataToCanvas( a ) );
    display.append( dataToCanvas( b ) );
    display.append( dataToCanvas( colorDiffData ) );
    display.append( dataToCanvas( alphaDiffData ) );

    if ( extraDom ) {
      display.append( extraDom );
    }

    // for a line-break
    display.append( document.createElement( 'div' ) );

    isEqual = false;
  }
  assert.ok( isEqual, message );
  return isEqual;
}

function testUnion( assert, aShape, bShape, threshold, message ) {
  const normalCanvas = document.createElement( 'canvas' );
  normalCanvas.width = 100;
  normalCanvas.height = 100;
  const normalContext = normalCanvas.getContext( '2d' );
  normalContext.fillStyle = 'black';

  normalContext.beginPath();
  aShape.writeToContext( normalContext );
  normalContext.fill();

  normalContext.beginPath();
  bShape.writeToContext( normalContext );
  normalContext.fill();

  // document.body.appendChild( normalCanvas );

  const shape = aShape.shapeUnion( bShape );

  const testCanvas = document.createElement( 'canvas' );
  testCanvas.width = 100;
  testCanvas.height = 100;
  const testContext = testCanvas.getContext( '2d' );
  testContext.fillStyle = 'black';

  testContext.beginPath();
  shape.writeToContext( testContext );
  testContext.fill();

  // document.body.appendChild( testCanvas );

  const normalData = normalContext.getImageData( 0, 0, 100, 100 );
  const testData = testContext.getImageData( 0, 0, 100, 100 );

  dataEquals( assert, normalData, testData, threshold, message );
}

function testDifference( assert, aShape, bShape, threshold, message ) {
  const normalCanvas = document.createElement( 'canvas' );
  normalCanvas.width = 100;
  normalCanvas.height = 100;
  const normalContext = normalCanvas.getContext( '2d' );
  normalContext.fillStyle = 'white';
  normalContext.fillRect( 0, 0, 100, 100 );
  normalContext.fillStyle = 'black';

  normalContext.beginPath();
  aShape.writeToContext( normalContext );
  normalContext.fill();

  normalContext.fillStyle = 'white';

  normalContext.beginPath();
  bShape.writeToContext( normalContext );
  normalContext.fill();

  // document.body.appendChild( normalCanvas );

  const shape = aShape.shapeDifference( bShape );

  const testCanvas = document.createElement( 'canvas' );
  testCanvas.width = 100;
  testCanvas.height = 100;
  const testContext = testCanvas.getContext( '2d' );
  testContext.fillStyle = 'white';
  testContext.fillRect( 0, 0, 100, 100 );
  testContext.fillStyle = 'black';

  testContext.beginPath();
  shape.writeToContext( testContext );
  testContext.fill();

  // document.body.appendChild( testCanvas );

  const normalData = normalContext.getImageData( 0, 0, 100, 100 );
  const testData = testContext.getImageData( 0, 0, 100, 100 );

  dataEquals( assert, normalData, testData, threshold, message );
}

QUnit.test( 'Triangle union', assert => {
  testUnion( assert,
    new Shape().moveTo( 10, 10 ).lineTo( 90, 10 ).lineTo( 50, 90 ).close(),
    new Shape().moveTo( 10, 90 ).lineTo( 90, 90 ).lineTo( 50, 10 ).close(),
    1, 'Union of opposite orientation triangles'
  );
} );

QUnit.test( 'CAG union #1', assert => {
  testUnion( assert,
    new Shape().moveTo( 0, 0 ).lineTo( 10, 10 ).lineTo( 20, 0 ).close()
      .moveTo( 4, 2 ).lineTo( 16, 2 ).lineTo( 10, 6 ).close(),
    new Shape()
      .moveTo( 0, 8 ).lineTo( 10, 18 ).lineTo( 20, 8 ).close()
      .moveTo( 0, 20 ).lineTo( 20, 25 ).lineTo( 20, 20 ).lineTo( 0, 25 ).close()
      .moveTo( 0, 25 ).lineTo( 20, 30 ).lineTo( 20, 25 ).lineTo( 0, 30 ).close(),
    1, 'CAG test #1'
  );
} );

QUnit.test( 'CAG union #2', assert => {
  testUnion( assert,
    new Shape().moveTo( 0, 0 ).lineTo( 10, 0 ).lineTo( 10, 10 ).lineTo( 0, 10 ).close()
      .moveTo( 5, 10 ).lineTo( 15, 10 ).lineTo( 15, 20 ).lineTo( 5, 20 ).close(),
    new Shape().moveTo( 10, 0 ).lineTo( 20, 0 ).lineTo( 20, 10 ).lineTo( 10, 10 ).close()
      .moveTo( 20, 0 ).lineTo( 20, 10 ).lineTo( 30, 10 ).lineTo( 30, 0 ).close(),
    1, 'CAG test #2'
  );
} );

QUnit.test( 'Difference test', assert => {
  testDifference( assert,
    new Shape().rect( 0, 0, 100, 10 ).rect( 0, 20, 100, 10 ).rect( 0, 40, 100, 10 ).rect( 0, 60, 100, 10 ).rect( 0, 80, 100, 10 ),
    new Shape().rect( 0, 0, 10, 100 ).rect( 20, 0, 10, 100 ).rect( 40, 0, 10, 100 ).rect( 60, 0, 10, 100 ).rect( 80, 0, 10, 100 ),
    1, 'Difference test'
  );
} );

QUnit.test( 'CAG multiple test', assert => {
  let a = new Shape();
  let b = new Shape();
  let c = new Shape();

  a.moveTo( 0, 2 ).cubicCurveTo( 22, 2, -1, 10, 25, 10 ).lineTo( 25, 16.5 ).lineTo( 0, 16.5 ).close();
  a.moveTo( 0, 10 ).lineTo( 10, 10 ).lineTo( 10, 25 ).lineTo( 0, 25 ).close();
  a.moveTo( 13, 25 ).arc( 10, 25, 3, 0, Math.PI * 1.3, false ).close();

  b.moveTo( 0, 0 ).lineTo( 30, 16.5 ).lineTo( 30, 0 ).close();
  b.moveTo( 15, 2 ).lineTo( 25, 2 ).lineTo( 25, 7 ).quadraticCurveTo( 15, 7, 15, 2 ).close();

  c.rect( 20, 0, 3, 20 );

  a = a.transformed( Matrix3.scaling( 3 ) );
  b = b.transformed( Matrix3.scaling( 3 ) );
  c = c.transformed( Matrix3.scaling( 3 ) );

  testUnion( assert, a, b, 1, 'CAG multiple #1' );

  const ab = a.shapeUnion( b );

  testDifference( assert, ab, c, 1, 'CAG multiple #2' );
} );

QUnit.test( 'Testing cubic overlap', assert => {
  const a = new Shape();
  const b = new Shape();

  const curve = new Cubic( new Vector2( 0, 0 ), new Vector2( 10, 0 ), new Vector2( 10, 10 ), new Vector2( 20, 10 ) );

  const left = curve.subdivided( 0.7 )[ 0 ];
  const right = curve.subdivided( 0.3 )[ 1 ];

  a.moveTo( 0, 10 ).lineTo( left.start.x, left.start.y ).cubicCurveTo( left.control1.x, left.control1.y, left.control2.x, left.control2.y, left.end.x, left.end.y ).close();
  b.moveTo( 20, 0 ).lineTo( right.start.x, right.start.y ).cubicCurveTo( right.control1.x, right.control1.y, right.control2.x, right.control2.y, right.end.x, right.end.y ).close();

  testUnion( assert, a, b, 1, 'Cubic overlap union' );
} );

QUnit.test( 'Testing quadratic overlap', assert => {
  const a = new Shape();
  const b = new Shape();

  const curve = new Quadratic( new Vector2( 0, 0 ), new Vector2( 10, 0 ), new Vector2( 10, 10 ) );

  const left = curve.subdivided( 0.7 )[ 0 ];
  const right = curve.subdivided( 0.3 )[ 1 ];

  a.moveTo( 0, 10 ).lineTo( left.start.x, left.start.y ).quadraticCurveTo( left.control.x, left.control.y, left.end.x, left.end.y ).close();
  b.moveTo( 20, 0 ).lineTo( right.start.x, right.start.y ).quadraticCurveTo( right.control.x, right.control.y, right.end.x, right.end.y ).close();

  testUnion( assert, a, b, 1, 'Quadratic overlap union' );
} );

QUnit.test( 'Cubic self-intersection', assert => {
  const a = new Shape();
  const b = new Shape();

  a.moveTo( 10, 0 ).cubicCurveTo( 30, 10, 0, 10, 20, 0 ).close();
  b.rect( 0, 0, 5, 5 );

  testUnion( assert, a, b, 1, 'Cubic self-intersection' );
} );

QUnit.test( 'Cubic self-intersection + overlapping unused edge', assert => {
  const a = new Shape();
  const b = new Shape();

  a.moveTo( 10, 0 ).lineTo( 10, 10 ).lineTo( 10, 0 ).cubicCurveTo( 30, 10, 0, 10, 20, 0 ).close();
  b.rect( 0, 0, 5, 5 );

  testUnion( assert, a, b, 1, 'Cubic self-intersection' );
} );

QUnit.test( 'Removal of bridge edges', assert => {
  const a = new Shape();
  const b = new Shape();

  a.moveTo( 40, 50 ).lineTo( 20, 70 ).lineTo( 20, 30 ).lineTo( 40, 50 ).lineTo( 60, 50 ).lineTo( 80, 30 ).lineTo( 80, 70 ).lineTo( 60, 50 ).close();
  b.rect( 0, 0, 5, 5 );

  testUnion( assert, a, b, 1, 'Removal of bridge edges' );
} );

QUnit.test( 'Double circle', assert => {
  const a = new Shape();
  const b = new Shape();

  a.circle( 20, 20, 10 );
  b.circle( 25, 20, 10 );

  testUnion( assert, a, b, 1, 'Double circle union' );
  testDifference( assert, a, b, 1, 'Double circle difference' );
} );

QUnit.test( 'Half circle join', assert => {
  const a = new Shape();
  const b = new Shape();

  a.arc( 50, 50, 30, 0, Math.PI, false ).close();
  b.arc( 50, 50, 30, Math.PI, Math.PI * 2, false ).close();

  testUnion( assert, a, b, 1, 'Half circle union' );
} );

QUnit.test( 'Partial circle overlap', assert => {
  const a = new Shape();
  const b = new Shape();

  a.arc( 50, 50, 30, 0, Math.PI, false ).close();
  b.arc( 50, 50, 30, Math.PI * 0.5, Math.PI * 2, false ).close();

  testUnion( assert, a, b, 1, 'Partial circle union' );
} );

QUnit.test( 'Circle overlap', assert => {
  const a = new Shape();
  const b = new Shape();

  a.circle( 50, 50, 30 );
  b.circle( 50, 50, 30 );

  testUnion( assert, a, b, 1, 'Circle overlap union' );
} );

QUnit.test( 'Circle adjacent', assert => {
  const a = new Shape();
  const b = new Shape();

  a.circle( 10, 10, 5 );
  b.arc( 20, 10, 5, Math.PI, 3 * Math.PI, false ).close();

  testUnion( assert, a, b, 1, 'Circle adjacent union' );
} );

QUnit.test( '4 adjacent circles', assert => {
  const a = new Shape().circle( -5, 0, 5 ).circle( 5, 0, 5 );
  const b = new Shape().circle( 0, -5, 5 ).circle( 0, 5, 5 );

  testUnion( assert, a, b, 1, '4 adjacent circles union' );
} );

QUnit.test( 'Elliptical arc and lines', assert => {
  const a = new Shape( 'M 172.00000000000000000000 39.00000000000000000000 L 172.00000000000000000000 -51.00000000000000000000 L 225.00000000000000000000 -83.00000000000000000000 L 225.00000000000000000000 72.00000000000000000000 L 172.00000000000000000000 39.00000000000000000000 Z ' );
  const b = new Shape( 'M 239.85954693211317589885 9.90930831842961623579 A 79.71909386422636600855 39.85954693211318300428 450 0 1 160.14045306788682410115 9.90930831842964110479 A 79.71909386422636600855 39.85954693211318300428 450 0 1 239.85954693211317589885 9.90930831842959669586 Z ' );

  testUnion( assert, a, b, 1, 'Elliptical arc and lines union' );
} );

QUnit.test( 'Quadratic intersection', assert => {
  const a = new Shape( [ new Subpath( [
    new Quadratic(
      new Vector2( 16.704545454545453, -21 ),
      new Vector2( 17.644176136363637, -21 ),
      new Vector2( 18.449573863636363, -20.627130681818183 )
    )
  ] ) ] );
  const b = new Shape( [ new Subpath( [
    new Quadratic(
      new Vector2( 16.704545454545453, -21 ),
      new Vector2( 18.47940340909091, -21 ),
      new Vector2( 19.739701704545453, -19.739701704545453 )
    )
  ] ) ] );

  testUnion( assert, a, b, 1, 'Quadratic intersection union' );
} );

QUnit.skip( 'Winding map issue 1', assert => {
  // TODO: Should be solved by https://github.com/phetsims/kite/issues/97
  const shapes = [
    new Shape( 'M 510.33468750000002955858 589.00641927083324844716 A 2.61375000000000001776 2.61375000000000001776 0 0 1 507.72093750000004774847 591.62016927083323025727 L 468.46746643066416027068 591.62016927083345763094 A 2.61375000000000001776 2.61375000000000001776 0 0 1 465.85371643066417846057 589.00641927083324844716 L 465.85371643066412161716 571.69032552083331211179 A 2.61375000000000001776 2.61375000000000001776 0 0 1 468.46746643066416027068 569.07657552083333030168 L 507.72093750000004774847 569.07657552083333030168 A 2.61375000000000001776 2.61375000000000001776 0 0 1 510.33468750000002955858 571.69032552083331211179 L 510.33468750000008640200 589.00641927083324844716 Z ' ),
    new Shape( 'M 11.97968750000000071054 263.70345052083331438553 L 11.97968750000000071054 203.15157552083331893300 L 13.28656249999998806288 203.15157552083331893300 L 13.28656249999998806288 263.70345052083331438553 L 11.97968750000000071054 263.70345052083331438553 Z ' ),
    new Shape( 'M 12.19749999999998912870 263.70345052083331438553 L 12.19749999999998912870 203.15157552083331893300 L 11.97968750000000071054 203.36938802083332689108 L 13.28656249999998806288 203.36938802083332689108 L 13.06875000000000142109 203.15157552083331893300 L 13.06875000000000142109 263.70345052083331438553 L 13.28656249999998806288 263.48563802083333484916 L 11.97968750000000071054 263.48563802083333484916 L 12.19749999999998912870 263.70345052083331438553 Z M 11.97968750000000071054 263.92126302083329392190 L 13.28656249999998806288 263.92126302083329392190 L 13.50437499999999246825 263.92126302083329392190 L 13.50437499999999246825 263.70345052083331438553 L 13.50437499999999246825 203.15157552083331893300 L 13.50437499999999246825 202.93376302083331097492 L 13.28656249999998806288 202.93376302083331097492 L 11.97968750000000071054 202.93376302083331097492 L 11.76187499999999808153 202.93376302083331097492 L 11.76187499999999808153 203.15157552083331893300 L 11.76187499999999808153 263.70345052083331438553 L 11.76187499999999808153 263.92126302083329392190 L 11.97968750000000071054 263.92126302083329392190 Z ' )
  ];

  Shape.union( shapes );

  assert.expect( 0 );
} );

QUnit.skip( 'Winding map issue 2', assert => {
  // TODO: Should be solved by https://github.com/phetsims/kite/issues/97
  const shapes = [
    new Shape( 'M 101.60156250000000000000 266.18815104166662877105 L 299.16015625000000000000 266.18815104166662877105 L 299.16015625000000000000 463.74674479166662877105 L 101.60156250000000000000 463.74674479166662877105 L 101.60156250000000000000 266.18815104166662877105 Z' ),
    new Shape( 'M 101.60156250000000000000 266.47037760416662877105 L 299.16015625000000000000 266.47037760416662877105 L 298.87792968750000000000 266.18815104166662877105 L 298.87792968750000000000 463.74674479166662877105 L 299.16015625000000000000 463.46451822916662877105 L 101.60156250000000000000 463.46451822916662877105 L 101.88378906250000000000 463.74674479166662877105 L 101.88378906250000000000 266.18815104166662877105 L 101.60156250000000000000 266.47037760416662877105 Z' )
  ];

  Shape.union( shapes );

  assert.expect( 0 );
} );

QUnit.skip( 'Winding map issue 3', assert => {
  // TODO: Should be solved by https://github.com/phetsims/kite/issues/97
  const shapes = [ new Shape( 'M 577.22183948863630575943 532.07943636363631867425 A 122.56363636363636260285 14.89090909090909065071 0 0 1 332.09456676136363739715 532.07943636363631867425 A 122.56363636363636260285 14.89090909090909065071 0 0 1 577.22183948863630575943 532.07943636363631867425 Z ' ), new Shape( 'M 332.09456676136363739715 402.64307272727273812052 L 577.22183948863641944627 402.64307272727273812052 L 577.22183948863641944627 532.07943636363631867425 L 332.09456676136363739715 532.07943636363631867425 L 332.09456676136363739715 402.64307272727273812052 Z ' ) ];

  Shape.union( shapes );

  assert.expect( 0 );
} );

QUnit.skip( 'markBridges stack issue', assert => {
  // TODO: Should be solved by https://github.com/phetsims/kite/issues/97
  const shapes = [ new Shape( 'M 146.83643213907879498947 232.61979166666662877105 L 550.16356786092126185395 232.61979166666662877105 L 550.16356786092126185395 294.33333333333325754211 L 146.83643213907879498947 294.33333333333325754211 L 146.83643213907879498947 232.61979166666662877105 Z ' ), new Shape( 'M 140.82629230898126593274 338.34960937500000000000 L 338.38553884606790234102 338.34960937500000000000 L 337.02421072106790234102 336.98828125000000000000 L 337.02421072106790234102 474.93619791666662877105 L 338.38553884606790234102 473.57486979166662877105 L 140.82629230898126593274 473.57486979166662877105 L 142.18762043398126593274 474.93619791666662877105 L 142.18762043398126593274 336.98828125000000000000 L 140.82629230898126593274 338.34960937500000000000 Z M 139.46496418398126593274 336.98828125000000000000 L 139.46496418398126593274 474.93619791666662877105 L 139.46496418398126593274 476.29752604166662877105 L 140.82629230898126593274 476.29752604166662877105 L 338.38553884606790234102 476.29752604166662877105 L 339.74686697106784549760 476.29752604166662877105 L 339.74686697106790234102 474.93619791666662877105 L 339.74686697106790234102 336.98828125000000000000 L 339.74686697106790234102 335.62695312500000000000 L 338.38553884606790234102 335.62695312500000000000 L 140.82629230898126593274 335.62695312500000000000 L 139.46496418398126593274 335.62695312500000000000 L 139.46496418398126593274 336.98828125000000000000 Z ' ), new Shape( 'M 140.14562824648126593274 338.34960937500000000000 L 339.06620290856790234102 338.34960937500000000000 L 337.02421072106790234102 336.30761718750000000000 L 337.02421072106790234102 475.61686197916662877105 L 339.06620290856790234102 473.57486979166662877105 L 140.14562824648126593274 473.57486979166662877105 L 142.18762043398126593274 475.61686197916662877105 L 142.18762043398126593274 336.30761718750000000000 L 140.14562824648126593274 338.34960937500000000000 Z M 138.10363605898126593274 336.30761718750000000000 L 138.10363605898126593274 475.61686197916662877105 L 138.10363605898126593274 477.65885416666662877105 L 140.14562824648126593274 477.65885416666662877105 L 339.06620290856790234102 477.65885416666662877105 L 341.10819509606784549760 477.65885416666662877105 L 341.10819509606790234102 475.61686197916662877105 L 341.10819509606790234102 336.30761718750000000000 L 341.10819509606801602786 334.26562500000000000000 L 339.06620290856790234102 334.26562500000000000000 L 140.14562824648126593274 334.26562500000000000000 L 138.10363605898126593274 334.26562500000000000000 L 138.10363605898126593274 336.30761718750000000000 Z ' ), new Shape( 'M 146.27160480898126593274 342.43359375000000000000 L 332.94022634606790234102 342.43359375000000000000 L 332.94022634606790234102 469.49088541666662877105 L 146.27160480898126593274 469.49088541666662877105 L 146.27160480898126593274 342.43359375000000000000 Z ' ), new Shape( 'M 146.52116178964578807609 342.43359375000000000000 L 332.69066936540338019768 342.43359375000000000000 L 332.69066936540338019768 469.49088541666662877105 L 146.52116178964578807609 469.49088541666662877105 L 146.52116178964578807609 342.43359375000000000000 Z ' ), new Shape( 'M 187.69730427991717647274 477.65885416666662877105 L 291.51452687513199180103 477.65885416666662877105 L 291.51452687513199180103 520.31380208333325754211 L 187.69730427991717647274 520.31380208333325754211 L 187.69730427991717647274 477.65885416666662877105 Z ' ), new Shape( 'M 395.56132009606790234102 334.26562500000000000000 L 558.89636394101876248897 334.26562500000000000000 L 558.89636394101876248897 445.44075520833325754211 L 395.56132009606790234102 445.44075520833325754211 L 395.56132009606790234102 334.26562500000000000000 Z ' ), new Shape( 'M 395.77968245414939474358 334.26562500000000000000 L 558.67800158293721324299 334.26562500000000000000 L 558.67800158293721324299 445.44075520833325754211 L 395.77968245414939474358 445.44075520833325754211 L 395.77968245414939474358 334.26562500000000000000 Z ' ), new Shape( 'M 445.90101265758141835249 448.16341145833325754211 L 508.55667137950518963407 448.16341145833325754211 L 508.55667137950518963407 466.31445312500000000000 L 445.90101265758141835249 466.31445312500000000000 L 445.90101265758141835249 448.16341145833325754211 Z ' ), new Shape( 'M 234.57953024657419405230 345.13152881542816885485 L 301.01277229185620853968 345.13152881542816885485 L 301.01277229185620853968 412.33982535123845991620 L 234.57953024657419405230 412.33982535123845991620 L 234.57953024657419405230 345.13152881542816885485 Z ' ), new Shape( 'M 294.55655216050286071550 351.59023445260271500956 L 271.45404779392362115686 374.69273881918195456819 L 271.83908953336663216760 375.07778055862496557893 L 294.94159389994581488281 351.97527619204572602030 L 294.55655216050286071550 351.59023445260271500956 Z ' ), new Shape( 'M 280.31580429243138041784 264.97133378651375323898 L 309.18234176801735202389 264.97133378651375323898 L 309.18234176801735202389 286.75258378651375323898 L 280.31580429243138041784 286.75258378651375323898 L 280.31580429243138041784 264.97133378651375323898 Z ' ), new Shape( 'M 285.76111679243138041784 270.41664628651375323898 L 303.73702926801735202389 270.41664628651375323898 L 303.73702926801735202389 281.30727128651375323898 L 285.76111679243138041784 281.30727128651375323898 L 285.76111679243138041784 270.41664628651375323898 Z ' ), new Shape( 'M 204.04823943449844136921 428.28823560597442110520 L 331.54406310393198964448 428.28823560597442110520 L 331.54406310393198964448 444.62417310597442110520 L 204.04823943449844136921 444.62417310597442110520 L 204.04823943449844136921 428.28823560597442110520 Z ' ), new Shape( 'M 206.77089568449844136921 431.01089185597442110520 L 328.82140685393198964448 431.01089185597442110520 L 328.82140685393198964448 441.90151685597442110520 L 206.77089568449844136921 441.90151685597442110520 L 206.77089568449844136921 431.01089185597442110520 Z ' ), new Shape( 'M 403.39490082190224029546 373.86056890016305942481 L 413.12889386650169853965 373.86056890016305942481 L 413.12889386650169853965 383.61078526650356934624 L 403.39490082190224029546 383.61078526650356934624 L 403.39490082190224029546 373.86056890016305942481 Z ' ), new Shape( 'M 403.39490082190224029546 373.86868056103355684172 L 413.12889386650169853965 373.86868056103355684172 L 413.12889386650169853965 383.60267360563307192933 L 403.39490082190224029546 383.60267360563307192933 L 403.39490082190224029546 373.86868056103355684172 Z ' ), new Shape( 'M 435.02229823548958620449 351.59023445260271500956 L 411.91979386891034664586 374.69273881918195456819 L 412.30483560835335765660 375.07778055862496557893 L 435.40733997493259721523 351.97527619204572602030 L 435.02229823548958620449 351.59023445260271500956 Z ' ), new Shape( 'M 415.87359023863393758802 322.42941395598370490916 L 454.55604797178824583170 322.42941395598370490916 L 454.55604797178824583170 344.21066395598370490916 L 415.87359023863393758802 344.21066395598370490916 L 415.87359023863393758802 322.42941395598370490916 Z ' ), new Shape( 'M 421.31890273863393758802 327.87472645598370490916 L 449.11073547178824583170 327.87472645598370490916 L 449.11073547178824583170 338.76535145598370490916 L 421.31890273863393758802 338.76535145598370490916 L 421.31890273863393758802 327.87472645598370490916 Z ' ), new Shape( 'M 376.66818358382602127676 399.93861110563307192933 L 439.85561110457797440176 399.93861110563307192933 L 439.85561110457797440176 416.27454860563307192933 L 376.66818358382602127676 416.27454860563307192933 L 376.66818358382602127676 399.93861110563307192933 Z ' ), new Shape( 'M 379.39083983382602127676 402.66126735563307192933 L 437.13295485457797440176 402.66126735563307192933 L 437.13295485457797440176 413.55189235563307192933 L 379.39083983382602127676 413.55189235563307192933 L 379.39083983382602127676 402.66126735563307192933 Z ' ), new Shape( 'M 404.26671835860622650216 242.30582343474500817138 L 412.25707632979771233295 242.30582343474500817138 L 412.25707632979771233295 255.91910468474500817138 L 404.26671835860622650216 255.91910468474500817138 L 404.26671835860622650216 242.30582343474500817138 Z ' ), new Shape( 'M 417.24666296920202057663 249.11246405974500817138 L 417.06274428902560202914 250.92108408340098435474 L 416.51851790087260951623 252.65565899078464440208 L 415.63626449701780529722 254.24517508138382027028 L 414.45210363547533916062 255.62455737968912217184 L 413.01451500104985825601 256.73733381233751060790 L 411.38235364134402516356 257.53794718143058162241 L 409.62244043419525496574 257.99362028156957649117 L 407.80682643308506385438 258.08569780249553105023 L 406.00984308854464188698 257.81041007968315170729 L 404.30505910983589501484 257.17902742484915279420 L 402.76226855335090704102 256.21739871806687460776 L 401.44463344574228358397 254.96489315157853638993 L 400.40609792313108528106 253.47278845043928185987 L 399.68917975183569524233 251.80217155642867510323 L 399.32322964602349202323 250.02143772147661593408 L 399.32322964602349202323 248.20349039801340040867 L 399.68917975183569524233 246.42275656306134123952 L 400.40609792313108528106 244.75213966905070606117 L 401.44463344574228358397 243.26003496791147995282 L 402.76226855335090704102 242.00752940142314173499 L 404.30505910983589501484 241.04590069464086354856 L 406.00984308854464188698 240.41451803980689305718 L 407.80682643308506385438 240.13923031699448529253 L 409.62244043419525496574 240.23130783792043985159 L 411.38235364134402516356 240.68698093805946314205 L 413.01451500104985825601 241.48759430715253415656 L 414.45210363547533916062 242.60037073980086574920 L 415.63626449701780529722 243.97975303810619607248 L 416.51851790087260951623 245.56926912870540036238 L 417.06274428902560202914 247.30384403608906040972 L 417.24666296920202057663 249.11246405974500817138 Z M 418.88025671920200920795 249.11246405974500817138 L 418.66289827899356623675 246.97500403178796091197 L 418.01972163844919805342 244.92505186851636267420 L 416.97705852480254407055 243.04653285235369253314 L 415.57759568843414399453 241.41635377253831507005 L 413.87862730229488761324 240.10125435213569744519 L 411.94970933173345883915 239.15507491593481859127 L 409.86981190510311989783 238.61655216122505862586 L 407.72408626742748083416 238.50773327285801883590 L 405.60037867842510195260 238.83307330890906428067 L 403.58563397631479574557 239.57925281007646844955 L 401.76233604592334813788 240.71572309991006477503 L 400.20513091874960309724 242.19595695121446965459 L 398.97777075566358462311 243.95935341619721725692 L 398.13050382595099563332 245.93371883639156294521 L 397.69801733726370684963 248.03822245951675995457 L 397.69801733726370684963 250.18670565997328480989 L 398.13050382595099563332 252.29120928309845339754 L 398.97777075566364146653 254.26557470329282750754 L 400.20513091874960309724 256.02897116827557510987 L 401.76233604592334813788 257.50920501957995156772 L 403.58563397631479574557 258.64567530941354789320 L 405.60037867842510195260 259.39185481058098048379 L 407.72408626742748083416 259.71719484663202592856 L 409.86981190510311989783 259.60837595826495771689 L 411.94970933173345883915 259.06985320355522617319 L 413.87862730229488761324 258.12367376735431889756 L 415.57759568843414399453 256.80857434695167285099 L 416.97705852480254407055 255.17839526713632380961 L 418.01972163844919805342 253.29987625097365366855 L 418.66289827899356623675 251.24992408770205543078 L 418.88025671920200920795 249.11246405974500817138 Z ' ), new Shape( 'M 267.79615126921527235027 378.73567708333331438553 L 268.34068251921519276948 378.73567708333331438553 L 268.04145412114024793482 378.85380871074147535182 L 268.13566095038362391278 379.16140875777097107857 L 267.85673607037443844092 379.00111644067345650910 L 267.67498166689682648212 379.26655579801359863268 L 267.62639642863103972559 378.94854292055219957547 L 267.30554556536526433774 378.97194033814969316154 L 267.52388564421522687553 378.73567708333331438553 L 267.30554556536526433774 378.49941382851693560951 L 267.62639642863103972559 378.52281124611442919559 L 267.67498166689682648212 378.20479836865308698179 L 267.85673607037443844092 378.47023772599322910537 L 268.13566095038362391278 378.30994540889565769248 L 268.04145412114024793482 378.61754545592515341923 L 268.34068251921519276948 378.73567708333331438553 ' ), new Shape( 'M 267.52388564421522687553 378.46023502604168697872 L 268.06841689421526098158 378.46023502604168697872 L 268.06841689421526098158 379.01111914062499863576 L 267.52388564421522687553 379.01111914062499863576 L 267.52388564421522687553 378.46023502604168697872 Z ' ), new Shape( 'M 408.26189734420199783926 378.73567708333331438553 L 408.80642859420191825848 378.73567708333331438553 L 408.50720019612703026723 378.85380871074147535182 L 408.60140702537034940178 379.16140875777097107857 L 408.32248214536116392992 379.00111644067345650910 L 408.14072774188360881453 379.26655579801359863268 L 408.09214250361776521459 378.94854292055219957547 L 407.77129164035198982674 378.97194033814969316154 L 407.98963171920200920795 378.73567708333331438553 L 407.77129164035198982674 378.49941382851693560951 L 408.09214250361776521459 378.52281124611442919559 L 408.14072774188360881453 378.20479836865308698179 L 408.32248214536116392992 378.47023772599322910537 L 408.60140702537034940178 378.30994540889565769248 L 408.50720019612703026723 378.61754545592515341923 L 408.80642859420191825848 378.73567708333331438553 ' ), new Shape( 'M 407.98963171920200920795 378.46023502604168697872 L 408.53416296920192962716 378.46023502604168697872 L 408.53416296920192962716 379.01111914062499863576 L 407.98963171920200920795 379.01111914062499863576 L 407.98963171920200920795 378.46023502604168697872 Z ' ), new Shape( 'M -1698.72429378059905502596 2345.52838775814734617597 L 2234.31659631902948603965 2345.52838775814734617597 L 2234.31659631902948603965 2344.98385650814725522650 L -1698.72429378059905502596 2344.98385650814725522650 L -1698.72429378059905502596 2345.52838775814734617597 Z M -1698.45202815559900955122 2345.25612213314752807491 L -1698.45202815559900955122 -1587.78476796648055824335 L -1698.99655940559910050069 -1587.78476796648055824335 L -1698.99655940559910050069 2345.25612213314752807491 L -1698.45202815559900955122 2345.25612213314752807491 Z M -1698.72429378059905502596 2275.29551472065395500977 L 2234.31659631902948603965 2275.29551472065395500977 L 2234.31659631902948603965 2274.75098347065386406030 L -1698.72429378059905502596 2274.75098347065386406030 L -1698.72429378059905502596 2275.29551472065395500977 Z M -1628.21915511810561838502 2345.25612213314752807491 L -1628.21915511810561838502 -1587.78476796648055824335 L -1628.76368636810570933449 -1587.78476796648055824335 L -1628.76368636810570933449 2345.25612213314752807491 L -1628.21915511810561838502 2345.25612213314752807491 Z M -1698.72429378059905502596 2205.06264168316056384356 L 2234.31659631902948603965 2205.06264168316056384356 L 2234.31659631902948603965 2204.51811043316047289409 L -1698.72429378059905502596 2204.51811043316047289409 L -1698.72429378059905502596 2205.06264168316056384356 Z M -1557.98628208061222721881 2345.25612213314752807491 L -1557.98628208061222721881 -1587.78476796648055824335 L -1558.53081333061231816828 -1587.78476796648055824335 L -1558.53081333061231816828 2345.25612213314752807491 L -1557.98628208061222721881 2345.25612213314752807491 Z M -1698.72429378059905502596 2134.82976864566717267735 L 2234.31659631902948603965 2134.82976864566717267735 L 2234.31659631902948603965 2134.28523739566708172788 L -1698.72429378059905502596 2134.28523739566708172788 L -1698.72429378059905502596 2134.82976864566717267735 Z M -1487.75340904311860867892 2345.25612213314752807491 L -1487.75340904311860867892 -1587.78476796648055824335 L -1488.29794029311892700207 -1587.78476796648055824335 L -1488.29794029311892700207 2345.25612213314752807491 L -1487.75340904311860867892 2345.25612213314752807491 Z M -1698.72429378059905502596 2064.59689560817378151114 L 2234.31659631902948603965 2064.59689560817378151114 L 2234.31659631902948603965 2064.05236435817414530902 L -1698.72429378059905502596 2064.05236435817414530902 L -1698.72429378059905502596 2064.59689560817378151114 Z M -1417.52053600562544488639 2345.25612213314752807491 L -1417.52053600562544488639 -1587.78476796648055824335 L -1418.06506725562553583586 -1587.78476796648055824335 L -1418.06506725562553583586 2345.25612213314752807491 L -1417.52053600562544488639 2345.25612213314752807491 Z M -1698.72429378059905502596 1994.36402257068039034493 L 2234.31659631902948603965 1994.36402257068039034493 L 2234.31659631902948603965 1993.81949132068052676914 L -1698.72429378059905502596 1993.81949132068052676914 L -1698.72429378059905502596 1994.36402257068039034493 Z M -1347.28766296813205372018 2345.25612213314752807491 L -1347.28766296813205372018 -1587.78476796648055824335 L -1347.83219421813214466965 -1587.78476796648055824335 L -1347.83219421813214466965 2345.25612213314752807491 L -1347.28766296813205372018 2345.25612213314752807491 Z M -1698.72429378059905502596 1924.13114953318677180505 L 2234.31659631902948603965 1924.13114953318677180505 L 2234.31659631902948603965 1923.58661828318713560293 L -1698.72429378059905502596 1923.58661828318713560293 L -1698.72429378059905502596 1924.13114953318677180505 Z M -1277.05478993063888992765 2345.25612213314752807491 L -1277.05478993063888992765 -1587.78476796648055824335 L -1277.59932118063875350344 -1587.78476796648055824335 L -1277.59932118063875350344 2345.25612213314752807491 L -1277.05478993063888992765 2345.25612213314752807491 Z M -1698.72429378059905502596 1853.89827649569360801252 L 2234.31659631902948603965 1853.89827649569360801252 L 2234.31659631902948603965 1853.35374524569374443672 L -1698.72429378059905502596 1853.35374524569374443672 L -1698.72429378059905502596 1853.89827649569360801252 Z M -1206.82191689314549876144 2345.25612213314752807491 L -1206.82191689314549876144 -1587.78476796648055824335 L -1207.36644814314536233724 -1587.78476796648055824335 L -1207.36644814314536233724 2345.25612213314752807491 L -1206.82191689314549876144 2345.25612213314752807491 Z M -1698.72429378059905502596 1783.66540345819998947263 L 2234.31659631902948603965 1783.66540345819998947263 L 2234.31659631902948603965 1783.12087220820012589684 L -1698.72429378059905502596 1783.12087220820012589684 L -1698.72429378059905502596 1783.66540345819998947263 Z M -1136.58904385565210759523 2345.25612213314752807491 L -1136.58904385565210759523 -1587.78476796648055824335 L -1137.13357510565219854470 -1587.78476796648055824335 L -1137.13357510565219854470 2345.25612213314752807491 L -1136.58904385565210759523 2345.25612213314752807491 Z M -1698.72429378059905502596 1713.43253042070682568010 L 2234.31659631902948603965 1713.43253042070682568010 L 2234.31659631902948603965 1712.88799917070696210430 L -1698.72429378059905502596 1712.88799917070696210430 L -1698.72429378059905502596 1713.43253042070682568010 Z M -1066.35617081815871642902 2345.25612213314752807491 L -1066.35617081815871642902 -1587.78476796648055824335 L -1066.90070206815858000482 -1587.78476796648055824335 L -1066.90070206815858000482 2345.25612213314752807491 L -1066.35617081815871642902 2345.25612213314752807491 Z M -1698.72429378059905502596 1643.19965738321366188757 L 2234.31659631902948603965 1643.19965738321366188757 L 2234.31659631902948603965 1642.65512613321379831177 L -1698.72429378059905502596 1642.65512613321379831177 L -1698.72429378059905502596 1643.19965738321366188757 Z M -996.12329778066543894965 2345.25612213314752807491 L -996.12329778066543894965 -1587.78476796648055824335 L -996.66782903066541621229 -1587.78476796648055824335 L -996.66782903066541621229 2345.25612213314752807491 L -996.12329778066543894965 2345.25612213314752807491 Z M -1698.72429378059905502596 1572.96678434572027072136 L 2234.31659631902948603965 1572.96678434572027072136 L 2234.31659631902948603965 1572.42225309572017977189 L -1698.72429378059905502596 1572.42225309572017977189 L -1698.72429378059905502596 1572.96678434572027072136 Z M -925.89042474317182040977 2345.25612213314752807491 L -925.89042474317182040977 -1587.78476796648055824335 L -926.43495599317191135924 -1587.78476796648055824335 L -926.43495599317191135924 2345.25612213314752807491 L -925.89042474317182040977 2345.25612213314752807491 Z M -1698.72429378059905502596 1502.73391130822687955515 L 2234.31659631902948603965 1502.73391130822687955515 L 2234.31659631902948603965 1502.18938005822701597936 L -1698.72429378059905502596 1502.18938005822701597936 L -1698.72429378059905502596 1502.73391130822687955515 Z M -855.65755170567854293040 2345.25612213314752807491 L -855.65755170567854293040 -1587.78476796648055824335 L -856.20208295567874756671 -1587.78476796648055824335 L -856.20208295567874756671 2345.25612213314752807491 L -855.65755170567854293040 2345.25612213314752807491 Z M -1698.72429378059905502596 1432.50103827073371576262 L 2234.31659631902948603965 1432.50103827073371576262 L 2234.31659631902948603965 1431.95650702073362481315 L -1698.72429378059905502596 1431.95650702073362481315 L -1698.72429378059905502596 1432.50103827073371576262 Z M -785.42467866818537913787 2345.25612213314752807491 L -785.42467866818537913787 -1587.78476796648055824335 L -785.96920991818535640050 -1587.78476796648055824335 L -785.96920991818535640050 2345.25612213314752807491 L -785.42467866818537913787 2345.25612213314752807491 Z M -1698.72429378059905502596 1362.26816523324032459641 L 2234.31659631902948603965 1362.26816523324032459641 L 2234.31659631902948603965 1361.72363398324023364694 L -1698.72429378059905502596 1361.72363398324023364694 L -1698.72429378059905502596 1362.26816523324032459641 Z M -715.19180563069198797166 2345.25612213314752807491 L -715.19180563069198797166 -1587.78476796648055824335 L -715.73633688069196523429 -1587.78476796648055824335 L -715.73633688069196523429 2345.25612213314752807491 L -715.19180563069198797166 2345.25612213314752807491 Z M -1698.72429378059905502596 1292.03529219574693343020 L 2234.31659631902948603965 1292.03529219574693343020 L 2234.31659631902948603965 1291.49076094574684248073 L -1698.72429378059905502596 1291.49076094574684248073 L -1698.72429378059905502596 1292.03529219574693343020 Z M -644.95893259319859680545 2345.25612213314752807491 L -644.95893259319859680545 -1587.78476796648055824335 L -645.50346384319868775492 -1587.78476796648055824335 L -645.50346384319868775492 2345.25612213314752807491 L -644.95893259319859680545 2345.25612213314752807491 Z M -1698.72429378059905502596 1221.80241915825354226399 L 2234.31659631902948603965 1221.80241915825354226399 L 2234.31659631902948603965 1221.25788790825345131452 L -1698.72429378059905502596 1221.25788790825345131452 L -1698.72429378059905502596 1221.80241915825354226399 Z M -574.72605955570520563924 2345.25612213314752807491 L -574.72605955570520563924 -1587.78476796648055824335 L -575.27059080570518290187 -1587.78476796648055824335 L -575.27059080570518290187 2345.25612213314752807491 L -574.72605955570520563924 2345.25612213314752807491 Z M -1698.72429378059905502596 1151.56954612076015109778 L 2234.31659631902948603965 1151.56954612076015109778 L 2234.31659631902948603965 1151.02501487076006014831 L -1698.72429378059905502596 1151.02501487076006014831 L -1698.72429378059905502596 1151.56954612076015109778 Z M -504.49318651821181447303 2345.25612213314752807491 L -504.49318651821181447303 -1587.78476796648055824335 L -505.03771776821190542250 -1587.78476796648055824335 L -505.03771776821190542250 2345.25612213314752807491 L -504.49318651821181447303 2345.25612213314752807491 Z M -1698.72429378059905502596 1081.33667308326675993158 L 2234.31659631902948603965 1081.33667308326675993158 L 2234.31659631902948603965 1080.79214183326666898211 L -1698.72429378059905502596 1080.79214183326666898211 L -1698.72429378059905502596 1081.33667308326675993158 Z M -434.26031348071853699366 2345.25612213314752807491 L -434.26031348071853699366 -1587.78476796648055824335 L -434.80484473071851425630 -1587.78476796648055824335 L -434.80484473071851425630 2345.25612213314752807491 L -434.26031348071853699366 2345.25612213314752807491 Z M -1698.72429378059905502596 1011.10380004577359613904 L 2234.31659631902948603965 1011.10380004577359613904 L 2234.31659631902948603965 1010.55926879577350518957 L -1698.72429378059905502596 1010.55926879577350518957 L -1698.72429378059905502596 1011.10380004577359613904 Z M -364.02744044322514582745 2345.25612213314752807491 L -364.02744044322514582745 -1587.78476796648055824335 L -364.57197169322506624667 -1587.78476796648055824335 L -364.57197169322506624667 2345.25612213314752807491 L -364.02744044322514582745 2345.25612213314752807491 Z M -1698.72429378059905502596 940.87092700828020497283 L 2234.31659631902948603965 940.87092700828020497283 L 2234.31659631902948603965 940.32639575828011402336 L -1698.72429378059905502596 940.32639575828011402336 L -1698.72429378059905502596 940.87092700828020497283 Z M -293.79456740573169781783 2345.25612213314752807491 L -293.79456740573169781783 -1587.78476796648055824335 L -294.33909865573173192388 -1587.78476796648055824335 L -294.33909865573173192388 2345.25612213314752807491 L -293.79456740573169781783 2345.25612213314752807491 Z M -1698.72429378059905502596 870.63805397078681380663 L 2234.31659631902948603965 870.63805397078681380663 L 2234.31659631902948603965 870.09352272078672285716 L -1698.72429378059905502596 870.09352272078672285716 L -1698.72429378059905502596 870.63805397078681380663 Z M -223.56169436823836349504 2345.25612213314752807491 L -223.56169436823836349504 -1587.78476796648055824335 L -224.10622561823836917938 -1587.78476796648055824335 L -224.10622561823836917938 2345.25612213314752807491 L -223.56169436823836349504 2345.25612213314752807491 Z M -1698.72429378059905502596 800.40518093329342264042 L 2234.31659631902948603965 800.40518093329342264042 L 2234.31659631902948603965 799.86064968329333169095 L -1698.72429378059905502596 799.86064968329333169095 L -1698.72429378059905502596 800.40518093329342264042 Z M -153.32882133074500075054 2345.25612213314752807491 L -153.32882133074500075054 -1587.78476796648055824335 L -153.87335258074497801317 -1587.78476796648055824335 L -153.87335258074497801317 2345.25612213314752807491 L -153.32882133074500075054 2345.25612213314752807491 Z M -1698.72429378059905502596 730.17230789580003147421 L 2234.31659631902948603965 730.17230789580003147421 L 2234.31659631902948603965 729.62777664580016789841 L -1698.72429378059905502596 729.62777664580016789841 L -1698.72429378059905502596 730.17230789580003147421 Z M -83.09594829325162379519 2345.25612213314752807491 L -83.09594829325162379519 -1587.78476796648055824335 L -83.64047954325161526867 -1587.78476796648055824335 L -83.64047954325161526867 2345.25612213314752807491 L -83.09594829325162379519 2345.25612213314752807491 Z M -1698.72429378059905502596 659.93943485830675399484 L 2234.31659631902948603965 659.93943485830675399484 L 2234.31659631902948603965 659.39490360830677673221 L -1698.72429378059905502596 659.39490360830677673221 L -1698.72429378059905502596 659.93943485830675399484 Z M -12.86307525575825039255 2345.25612213314752807491 L -12.86307525575825039255 -1587.78476796648055824335 L -13.40760650575825074782 -1587.78476796648055824335 L -13.40760650575825074782 2345.25612213314752807491 L -12.86307525575825039255 2345.25612213314752807491 Z M -1698.72429378059905502596 589.70656182081336282863 L 2234.31659631902948603965 589.70656182081336282863 L 2234.31659631902948603965 589.16203057081338556600 L -1698.72429378059905502596 589.16203057081338556600 L -1698.72429378059905502596 589.70656182081336282863 Z M 57.36979778173511590467 2345.25612213314752807491 L 57.36979778173511590467 -1587.78476796648055824335 L 56.82526653173511732575 -1587.78476796648055824335 L 56.82526653173511732575 2345.25612213314752807491 L 57.36979778173511590467 2345.25612213314752807491 Z M -1698.72429378059905502596 519.47368878332008534926 L 2234.31659631902948603965 519.47368878332008534926 L 2234.31659631902948603965 518.92915753331999439979 L -1698.72429378059905502596 518.92915753331999439979 L -1698.72429378059905502596 519.47368878332008534926 Z M 127.60267081922849286002 2345.25612213314752807491 L 127.60267081922849286002 -1587.78476796648055824335 L 127.05813956922848717568 -1587.78476796648055824335 L 127.05813956922848717568 2345.25612213314752807491 L 127.60267081922849286002 2345.25612213314752807491 Z M -1698.72429378059905502596 449.24081574582669418305 L 2234.31659631902948603965 449.24081574582669418305 L 2234.31659631902948603965 448.69628449582671692042 L -1698.72429378059905502596 448.69628449582671692042 L -1698.72429378059905502596 449.24081574582669418305 Z M 197.83554385672186981537 2345.25612213314752807491 L 197.83554385672186981537 -1587.78476796648055824335 L 197.29101260672186413103 -1587.78476796648055824335 L 197.29101260672186413103 2345.25612213314752807491 L 197.83554385672186981537 2345.25612213314752807491 Z M -1698.72429378059905502596 379.00794270833330301684 L 2234.31659631902948603965 379.00794270833330301684 L 2234.31659631902948603965 378.46341145833332575421 L -1698.72429378059905502596 378.46341145833332575421 L -1698.72429378059905502596 379.00794270833330301684 Z M 268.06841689421526098158 2345.25612213314752807491 L 268.06841689421526098158 -1587.78476796648055824335 L 267.52388564421522687553 -1587.78476796648055824335 L 267.52388564421522687553 2345.25612213314752807491 L 268.06841689421526098158 2345.25612213314752807491 Z M -1698.72429378059905502596 308.77506967083996869405 L 2234.31659631902948603965 308.77506967083996869405 L 2234.31659631902948603965 308.23053842083993458800 L -1698.72429378059905502596 308.23053842083993458800 L -1698.72429378059905502596 308.77506967083996869405 Z M 338.30128993170859530437 2345.25612213314752807491 L 338.30128993170859530437 -1587.78476796648055824335 L 337.75675868170856119832 -1587.78476796648055824335 L 337.75675868170856119832 2345.25612213314752807491 L 338.30128993170859530437 2345.25612213314752807491 Z M -1698.72429378059905502596 238.54219663334663437126 L 2234.31659631902948603965 238.54219663334663437126 L 2234.31659631902948603965 237.99766538334660026521 L -1698.72429378059905502596 237.99766538334660026521 L -1698.72429378059905502596 238.54219663334663437126 Z M 408.53416296920192962716 2345.25612213314752807491 L 408.53416296920192962716 -1587.78476796648055824335 L 407.98963171920200920795 -1587.78476796648055824335 L 407.98963171920200920795 2345.25612213314752807491 L 408.53416296920192962716 2345.25612213314752807491 Z M -1698.72429378059905502596 168.30932359585327162677 L 2234.31659631902948603965 168.30932359585327162677 L 2234.31659631902948603965 167.76479234585326594242 L -1698.72429378059905502596 167.76479234585326594242 L -1698.72429378059905502596 168.30932359585327162677 Z M 478.76703600669537763679 2345.25612213314752807491 L 478.76703600669537763679 -1587.78476796648055824335 L 478.22250475669540037416 -1587.78476796648055824335 L 478.22250475669540037416 2345.25612213314752807491 L 478.76703600669537763679 2345.25612213314752807491 Z M -1698.72429378059905502596 98.07645055835989467141 L 2234.31659631902948603965 98.07645055835989467141 L 2234.31659631902948603965 97.53191930835990319792 L -1698.72429378059905502596 97.53191930835990319792 L -1698.72429378059905502596 98.07645055835989467141 Z M 548.99990904418871195958 2345.25612213314752807491 L 548.99990904418871195958 -1587.78476796648055824335 L 548.45537779418873469695 -1587.78476796648055824335 L 548.45537779418873469695 2345.25612213314752807491 L 548.99990904418871195958 2345.25612213314752807491 Z M -1698.72429378059905502596 27.84357752086660298119 L 2234.31659631902948603965 27.84357752086660298119 L 2234.31659631902948603965 27.29904627086659729684 L -1698.72429378059905502596 27.29904627086659729684 L -1698.72429378059905502596 27.84357752086660298119 Z M 619.23278208168198943895 2345.25612213314752807491 L 619.23278208168198943895 -1587.78476796648055824335 L 618.68825083168201217632 -1587.78476796648055824335 L 618.68825083168201217632 2345.25612213314752807491 L 619.23278208168198943895 2345.25612213314752807491 Z M -1698.72429378059905502596 -42.38929551662678818502 L 2234.31659631902948603965 -42.38929551662678818502 L 2234.31659631902948603965 -42.93382676662679386936 L -1698.72429378059905502596 -42.93382676662679386936 L -1698.72429378059905502596 -42.38929551662678818502 Z M 689.46565511917549429199 2345.25612213314752807491 L 689.46565511917549429199 -1587.78476796648055824335 L 688.92112386917551702936 -1587.78476796648055824335 L 688.92112386917551702936 2345.25612213314752807491 L 689.46565511917549429199 2345.25612213314752807491 Z M -1698.72429378059905502596 -112.62216855412015092952 L 2234.31659631902948603965 -112.62216855412015092952 L 2234.31659631902948603965 -113.16669980412012819215 L -1698.72429378059905502596 -113.16669980412012819215 L -1698.72429378059905502596 -112.62216855412015092952 Z M 759.69852815666877177136 2345.25612213314752807491 L 759.69852815666877177136 -1587.78476796648055824335 L 759.15399690666879450873 -1587.78476796648055824335 L 759.15399690666879450873 2345.25612213314752807491 L 759.69852815666877177136 2345.25612213314752807491 Z M -1698.72429378059905502596 -182.85504159161348525231 L 2234.31659631902948603965 -182.85504159161348525231 L 2234.31659631902948603965 -183.39957284161357620178 L -1698.72429378059905502596 -183.39957284161357620178 L -1698.72429378059905502596 -182.85504159161348525231 Z M 829.93140119416216293757 2345.25612213314752807491 L 829.93140119416216293757 -1587.78476796648055824335 L 829.38686994416218567494 -1587.78476796648055824335 L 829.38686994416218567494 2345.25612213314752807491 L 829.93140119416216293757 2345.25612213314752807491 Z M -1698.72429378059905502596 -253.08791462910687641852 L 2234.31659631902948603965 -253.08791462910687641852 L 2234.31659631902948603965 -253.63244587910685368115 L -1698.72429378059905502596 -253.63244587910685368115 L -1698.72429378059905502596 -253.08791462910687641852 Z M 900.16427423165555410378 2345.25612213314752807491 L 900.16427423165555410378 -1587.78476796648055824335 L 899.61974298165546315431 -1587.78476796648055824335 L 899.61974298165546315431 2345.25612213314752807491 L 900.16427423165555410378 2345.25612213314752807491 Z M -1698.72429378059905502596 -323.32078766660015389789 L 2234.31659631902948603965 -323.32078766660015389789 L 2234.31659631902948603965 -323.86531891660013116052 L -1698.72429378059905502596 -323.86531891660013116052 L -1698.72429378059905502596 -323.32078766660015389789 Z M 970.39714726914894526999 2345.25612213314752807491 L 970.39714726914894526999 -1587.78476796648055824335 L 969.85261601914896800736 -1587.78476796648055824335 L 969.85261601914896800736 2345.25612213314752807491 L 970.39714726914894526999 2345.25612213314752807491 Z M -1698.72429378059905502596 -393.55366070409348822068 L 2234.31659631902948603965 -393.55366070409348822068 L 2234.31659631902948603965 -394.09819195409346548331 L -1698.72429378059905502596 -394.09819195409346548331 L -1698.72429378059905502596 -393.55366070409348822068 Z M 1040.63002030664233643620 2345.25612213314752807491 L 1040.63002030664233643620 -1587.78476796648055824335 L 1040.08548905664224548673 -1587.78476796648055824335 L 1040.08548905664224548673 2345.25612213314752807491 L 1040.63002030664233643620 2345.25612213314752807491 Z M -1698.72429378059905502596 -463.78653374158687938689 L 2234.31659631902948603965 -463.78653374158687938689 L 2234.31659631902948603965 -464.33106499158685664952 L -1698.72429378059905502596 -464.33106499158685664952 L -1698.72429378059905502596 -463.78653374158687938689 Z M 1110.86289334413572760241 2345.25612213314752807491 L 1110.86289334413572760241 -1587.78476796648055824335 L 1110.31836209413586402661 -1587.78476796648055824335 L 1110.31836209413586402661 2345.25612213314752807491 L 1110.86289334413572760241 2345.25612213314752807491 Z M -1698.72429378059905502596 -534.01940677908010002284 L 2234.31659631902948603965 -534.01940677908010002284 L 2234.31659631902948603965 -534.56393802908041834598 L -1698.72429378059905502596 -534.56393802908041834598 L -1698.72429378059905502596 -534.01940677908010002284 Z M 1181.09576638162911876861 2345.25612213314752807491 L 1181.09576638162911876861 -1587.78476796648055824335 L 1180.55123513162902781914 -1587.78476796648055824335 L 1180.55123513162902781914 2345.25612213314752807491 L 1181.09576638162911876861 2345.25612213314752807491 Z M -1698.72429378059905502596 -604.25227981657349118905 L 2234.31659631902948603965 -604.25227981657349118905 L 2234.31659631902948603965 -604.79681106657358213852 L -1698.72429378059905502596 -604.79681106657358213852 L -1698.72429378059905502596 -604.25227981657349118905 Z M 1251.32863941912250993482 2345.25612213314752807491 L 1251.32863941912250993482 -1587.78476796648055824335 L 1250.78410816912241898535 -1587.78476796648055824335 L 1250.78410816912241898535 2345.25612213314752807491 L 1251.32863941912250993482 2345.25612213314752807491 Z M -1698.72429378059905502596 -674.48515285406688235526 L 2234.31659631902948603965 -674.48515285406688235526 L 2234.31659631902948603965 -675.02968410406697330473 L -1698.72429378059905502596 -675.02968410406697330473 L -1698.72429378059905502596 -674.48515285406688235526 Z M 1321.56151245661567372736 2345.25612213314752807491 L 1321.56151245661567372736 -1587.78476796648055824335 L 1321.01698120661581015156 -1587.78476796648055824335 L 1321.01698120661581015156 2345.25612213314752807491 L 1321.56151245661567372736 2345.25612213314752807491 Z M -1698.72429378059905502596 -744.71802589156027352146 L 2234.31659631902948603965 -744.71802589156027352146 L 2234.31659631902948603965 -745.26255714156036447093 L -1698.72429378059905502596 -745.26255714156036447093 L -1698.72429378059905502596 -744.71802589156027352146 Z M 1391.79438549410929226724 2345.25612213314752807491 L 1391.79438549410929226724 -1587.78476796648055824335 L 1391.24985424410920131777 -1587.78476796648055824335 L 1391.24985424410920131777 2345.25612213314752807491 L 1391.79438549410929226724 2345.25612213314752807491 Z M -1698.72429378059905502596 -814.95089892905366468767 L 2234.31659631902948603965 -814.95089892905366468767 L 2234.31659631902948603965 -815.49543017905352826347 L -1698.72429378059905502596 -815.49543017905352826347 L -1698.72429378059905502596 -814.95089892905366468767 Z M 1462.02725853160245605977 2345.25612213314752807491 L 1462.02725853160245605977 -1587.78476796648055824335 L 1461.48272728160236511030 -1587.78476796648055824335 L 1461.48272728160236511030 2345.25612213314752807491 L 1462.02725853160245605977 2345.25612213314752807491 Z M -1698.72429378059905502596 -885.18377196654728322756 L 2234.31659631902948603965 -885.18377196654728322756 L 2234.31659631902948603965 -885.72830321654714680335 L -1698.72429378059905502596 -885.72830321654714680335 L -1698.72429378059905502596 -885.18377196654728322756 Z M 1532.26013156909607459966 2345.25612213314752807491 L 1532.26013156909607459966 -1587.78476796648055824335 L 1531.71560031909598365019 -1587.78476796648055824335 L 1531.71560031909598365019 2345.25612213314752807491 L 1532.26013156909607459966 2345.25612213314752807491 Z M -1698.72429378059905502596 -955.41664500404044702009 L 2234.31659631902948603965 -955.41664500404044702009 L 2234.31659631902948603965 -955.96117625404053796956 L -1698.72429378059905502596 -955.96117625404053796956 L -1698.72429378059905502596 -955.41664500404044702009 Z M 1602.49300460658923839219 2345.25612213314752807491 L 1602.49300460658923839219 -1587.78476796648055824335 L 1601.94847335658914744272 -1587.78476796648055824335 L 1601.94847335658914744272 2345.25612213314752807491 L 1602.49300460658923839219 2345.25612213314752807491 Z M -1698.72429378059905502596 -1025.64951804153361081262 L 2234.31659631902948603965 -1025.64951804153361081262 L 2234.31659631902948603965 -1026.19404929153370176209 L -1698.72429378059905502596 -1026.19404929153370176209 L -1698.72429378059905502596 -1025.64951804153361081262 Z M 1672.72587764408285693207 2345.25612213314752807491 L 1672.72587764408285693207 -1587.78476796648055824335 L 1672.18134639408276598260 -1587.78476796648055824335 L 1672.18134639408276598260 2345.25612213314752807491 L 1672.72587764408285693207 2345.25612213314752807491 Z M -1698.72429378059905502596 -1095.88239107902722935250 L 2234.31659631902948603965 -1095.88239107902722935250 L 2234.31659631902948603965 -1096.42692232902709292830 L -1698.72429378059905502596 -1096.42692232902709292830 L -1698.72429378059905502596 -1095.88239107902722935250 Z M 1742.95875068157602072461 2345.25612213314752807491 L 1742.95875068157602072461 -1587.78476796648055824335 L 1742.41421943157592977514 -1587.78476796648055824335 L 1742.41421943157592977514 2345.25612213314752807491 L 1742.95875068157602072461 2345.25612213314752807491 Z M -1698.72429378059905502596 -1166.11526411652039314504 L 2234.31659631902948603965 -1166.11526411652039314504 L 2234.31659631902948603965 -1166.65979536652025672083 L -1698.72429378059905502596 -1166.65979536652025672083 L -1698.72429378059905502596 -1166.11526411652039314504 Z M 1813.19162371906963926449 2345.25612213314752807491 L 1813.19162371906963926449 -1587.78476796648055824335 L 1812.64709246906954831502 -1587.78476796648055824335 L 1812.64709246906954831502 2345.25612213314752807491 L 1813.19162371906963926449 2345.25612213314752807491 Z M -1698.72429378059905502596 -1236.34813715401378431125 L 2234.31659631902948603965 -1236.34813715401378431125 L 2234.31659631902948603965 -1236.89266840401387526072 L -1698.72429378059905502596 -1236.89266840401387526072 L -1698.72429378059905502596 -1236.34813715401378431125 Z M 1883.42449675656280305702 2345.25612213314752807491 L 1883.42449675656280305702 -1587.78476796648055824335 L 1882.87996550656271210755 -1587.78476796648055824335 L 1882.87996550656271210755 2345.25612213314752807491 L 1883.42449675656280305702 2345.25612213314752807491 Z M -1698.72429378059905502596 -1306.58101019150694810378 L 2234.31659631902948603965 -1306.58101019150694810378 L 2234.31659631902948603965 -1307.12554144150703905325 L -1698.72429378059905502596 -1307.12554144150703905325 L -1698.72429378059905502596 -1306.58101019150694810378 Z M 1953.65736979405619422323 2345.25612213314752807491 L 1953.65736979405619422323 -1587.78476796648055824335 L 1953.11283854405633064744 -1587.78476796648055824335 L 1953.11283854405633064744 2345.25612213314752807491 L 1953.65736979405619422323 2345.25612213314752807491 Z M -1698.72429378059905502596 -1376.81388322900056664366 L 2234.31659631902948603965 -1376.81388322900056664366 L 2234.31659631902948603965 -1377.35841447900065759313 L -1698.72429378059905502596 -1377.35841447900065759313 L -1698.72429378059905502596 -1376.81388322900056664366 Z M 2023.89024283154935801576 2345.25612213314752807491 L 2023.89024283154935801576 -1587.78476796648055824335 L 2023.34571158154949443997 -1587.78476796648055824335 L 2023.34571158154949443997 2345.25612213314752807491 L 2023.89024283154935801576 2345.25612213314752807491 Z M -1698.72429378059905502596 -1447.04675626649373043620 L 2234.31659631902948603965 -1447.04675626649373043620 L 2234.31659631902948603965 -1447.59128751649382138567 L -1698.72429378059905502596 -1447.59128751649382138567 L -1698.72429378059905502596 -1447.04675626649373043620 Z M 2094.12311586904297655565 2345.25612213314752807491 L 2094.12311586904297655565 -1587.78476796648055824335 L 2093.57858461904288560618 -1587.78476796648055824335 L 2093.57858461904288560618 2345.25612213314752807491 L 2094.12311586904297655565 2345.25612213314752807491 Z M -1698.72429378059905502596 -1517.27962930398712160240 L 2234.31659631902948603965 -1517.27962930398712160240 L 2234.31659631902948603965 -1517.82416055398721255187 L -1698.72429378059905502596 -1517.82416055398721255187 L -1698.72429378059905502596 -1517.27962930398712160240 Z M 2164.35598890653636772186 2345.25612213314752807491 L 2164.35598890653636772186 -1587.78476796648055824335 L 2163.81145765653627677239 -1587.78476796648055824335 L 2163.81145765653627677239 2345.25612213314752807491 L 2164.35598890653636772186 2345.25612213314752807491 Z M -1698.72429378059905502596 -1587.51250234148051276861 L 2234.31659631902948603965 -1587.51250234148051276861 L 2234.31659631902948603965 -1588.05703359148083109176 L -1698.72429378059905502596 -1588.05703359148083109176 L -1698.72429378059905502596 -1587.51250234148051276861 Z M 2234.58886194402975888806 2345.25612213314752807491 L 2234.58886194402975888806 -1587.78476796648055824335 L 2234.04433069402966793859 -1587.78476796648055824335 L 2234.04433069402966793859 2345.25612213314752807491 L 2234.58886194402975888806 2345.25612213314752807491 Z ' ), new Shape( 'M 430.62488433837899037826 549.31009114583332575421 L 510.49804687500000000000 549.31009114583332575421 L 510.49804687500000000000 566.29946614583332120674 L 430.62488433837899037826 566.29946614583332120674 L 430.62488433837899037826 549.31009114583332575421 Z ' ), new Shape( 'M 510.33468750000002955858 589.00641927083324844716 A 2.61375000000000001776 2.61375000000000001776 0 0 1 507.72093750000004774847 591.62016927083323025727 L 468.46746643066416027068 591.62016927083345763094 A 2.61375000000000001776 2.61375000000000001776 0 0 1 465.85371643066417846057 589.00641927083324844716 L 465.85371643066412161716 571.69032552083331211179 A 2.61375000000000001776 2.61375000000000001776 0 0 1 468.46746643066416027068 569.07657552083333030168 L 507.72093750000004774847 569.07657552083333030168 A 2.61375000000000001776 2.61375000000000001776 0 0 1 510.33468750000002955858 571.69032552083331211179 L 510.33468750000008640200 589.00641927083324844716 Z ' ), new Shape( 'M 510.17132812500005911716 589.00641927083324844716 A 2.45039062500000026645 2.45039062500000026645 0 0 1 507.72093750000004774847 591.45680989583320297243 L 468.46746643066416027068 591.45680989583331665926 A 2.45039062500000026645 2.45039062500000026645 0 0 1 466.01707580566414890200 589.00641927083324844716 L 466.01707580566414890200 571.69032552083331211179 A 2.45039062500000026645 2.45039062500000026645 0 0 1 468.46746643066416027068 569.23993489583335758653 L 507.72093750000004774847 569.23993489583335758653 A 2.45039062500000026645 2.45039062500000026645 0 0 1 510.17132812500005911716 571.69032552083331211179 L 510.17132812500005911716 589.00641927083324844716 Z M 510.49804687500000000000 589.00641927083324844716 L 510.49804687500000000000 571.69032552083331211179 A 2.77710937500000021316 2.77710937500000021316 0 0 0 507.72093750000004774847 568.91321614583330301684 L 468.46746643066416027068 568.91321614583330301684 A 2.77710937500000021316 2.77710937500000021316 0 0 0 465.69035705566415117573 571.69032552083331211179 L 465.69035705566409433231 589.00641927083324844716 A 2.77710937500000021316 2.77710937500000021316 0 0 0 468.46746643066416027068 591.78352864583325754211 L 507.72093750000004774847 591.78352864583325754211 A 2.77710937500000021316 2.77710937500000021316 0 0 0 510.49804687500005684342 589.00641927083324844716 Z ' ), new Shape( 'M 510.33468750000002955858 589.00641927083324844716 A 2.61375000000000001776 2.61375000000000001776 0 0 1 507.72093750000004774847 591.62016927083323025727 L 468.46746643066416027068 591.62016927083345763094 A 2.61375000000000001776 2.61375000000000001776 0 0 1 465.85371643066417846057 589.00641927083324844716 L 465.85371643066412161716 571.69032552083331211179 A 2.61375000000000001776 2.61375000000000001776 0 0 1 468.46746643066416027068 569.07657552083333030168 L 507.72093750000004774847 569.07657552083333030168 A 2.61375000000000001776 2.61375000000000001776 0 0 1 510.33468750000002955858 571.69032552083331211179 L 510.33468750000008640200 589.00641927083324844716 Z ' ), new Shape( 'M 470.91785705566411479595 572.18040364583339396631 L 505.27054687500009322321 572.18040364583339396631 L 505.27054687500009322321 588.51634114583339396631 L 470.91785705566411479595 588.51634114583339396631 L 470.91785705566411479595 572.18040364583339396631 Z ' ), new Shape( 'M 121.00079956054688068434 248.72884114583331438553 A 2.17812500000000008882 2.17812500000000008882 0 0 1 118.82267456054688636868 250.90696614583330870119 L 56.63125000000000142109 250.90696614583333712289 A 2.17812500000000008882 2.17812500000000008882 0 0 1 54.45312500000000000000 248.72884114583331438553 L 54.45312500000000000000 238.65501302083330870119 A 2.17812500000000008882 2.17812500000000008882 0 0 1 56.63125000000000142109 236.47688802083331438553 L 118.82267456054688636868 236.47688802083331438553 A 2.17812500000000008882 2.17812500000000008882 0 0 1 121.00079956054688068434 238.65501302083330870119 L 121.00079956054688068434 248.72884114583331438553 Z ' ), new Shape( 'M 120.86466674804688636868 248.72884114583331438553 A 2.04199218750000000000 2.04199218750000000000 0 0 1 118.82267456054688636868 250.77083333333331438553 L 56.63125000000000142109 250.77083333333331438553 A 2.04199218750000000000 2.04199218750000000000 0 0 1 54.58925781250000142109 248.72884114583331438553 L 54.58925781250000142109 238.65501302083330870119 A 2.04199218750000000000 2.04199218750000000000 0 0 1 56.63125000000000142109 236.61302083333330870119 L 118.82267456054688636868 236.61302083333330870119 A 2.04199218750000000000 2.04199218750000000000 0 0 1 120.86466674804688636868 238.65501302083330870119 L 120.86466674804688636868 248.72884114583331438553 Z M 121.13693237304687500000 248.72884114583331438553 L 121.13693237304687500000 238.65501302083330870119 A 2.31425781250000017764 2.31425781250000017764 0 0 0 118.82267456054688636868 236.34075520833332006987 L 56.63125000000000142109 236.34075520833332006987 A 2.31425781250000017764 2.31425781250000017764 0 0 0 54.31699218749999857891 238.65501302083330870119 L 54.31699218750000568434 248.72884114583331438553 A 2.31425781250000017764 2.31425781250000017764 0 0 0 56.63125000000000142109 251.04309895833330301684 L 118.82267456054688636868 251.04309895833330301684 A 2.31425781250000017764 2.31425781250000017764 0 0 0 121.13693237304688921085 248.72884114583331438553 Z ' ), new Shape( 'M 121.00079956054688068434 248.72884114583331438553 A 2.17812500000000008882 2.17812500000000008882 0 0 1 118.82267456054688636868 250.90696614583330870119 L 56.63125000000000142109 250.90696614583333712289 A 2.17812500000000008882 2.17812500000000008882 0 0 1 54.45312500000000000000 248.72884114583331438553 L 54.45312500000000000000 238.65501302083330870119 A 2.17812500000000008882 2.17812500000000008882 0 0 1 56.63125000000000142109 236.47688802083331438553 L 118.82267456054688636868 236.47688802083331438553 A 2.17812500000000008882 2.17812500000000008882 0 0 1 121.00079956054688068434 238.65501302083330870119 L 121.00079956054688068434 248.72884114583331438553 Z ' ), new Shape( 'M 58.67324218750000142109 239.06341145833332006987 L 116.78068237304688636868 239.06341145833332006987 L 116.78068237304688636868 248.32044270833330301684 L 58.67324218750000142109 248.32044270833330301684 L 58.67324218750000142109 239.06341145833332006987 Z ' ), new Shape( 'M 11.97968750000000071054 263.70345052083331438553 L 11.97968750000000071054 203.15157552083331893300 L 13.28656249999998806288 203.15157552083331893300 L 13.28656249999998806288 263.70345052083331438553 L 11.97968750000000071054 263.70345052083331438553 Z ' ), new Shape( 'M 12.19749999999998912870 263.70345052083331438553 L 12.19749999999998912870 203.15157552083331893300 L 11.97968750000000071054 203.36938802083332689108 L 13.28656249999998806288 203.36938802083332689108 L 13.06875000000000142109 203.15157552083331893300 L 13.06875000000000142109 263.70345052083331438553 L 13.28656249999998806288 263.48563802083333484916 L 11.97968750000000071054 263.48563802083333484916 L 12.19749999999998912870 263.70345052083331438553 Z M 11.97968750000000071054 263.92126302083329392190 L 13.28656249999998806288 263.92126302083329392190 L 13.50437499999999246825 263.92126302083329392190 L 13.50437499999999246825 263.70345052083331438553 L 13.50437499999999246825 203.15157552083331893300 L 13.50437499999999246825 202.93376302083331097492 L 13.28656249999998806288 202.93376302083331097492 L 11.97968750000000071054 202.93376302083331097492 L 11.76187499999999808153 202.93376302083331097492 L 11.76187499999999808153 203.15157552083331893300 L 11.76187499999999808153 263.70345052083331438553 L 11.76187499999999808153 263.92126302083329392190 L 11.97968750000000071054 263.92126302083329392190 Z ' ), new Shape( 'M 11.97968750000000071054 263.70345052083331438553 L 11.97968750000000071054 203.15157552083331893300 L 13.28656249999998806288 203.15157552083331893300 L 13.28656249999998806288 263.70345052083331438553 L 11.97968750000000071054 263.70345052083331438553 Z ' ), new Shape( 'M 12.19749999999998912870 263.70345052083331438553 L 12.19749999999998912870 203.15157552083331893300 L 11.97968750000000071054 203.36938802083332689108 L 13.28656249999998806288 203.36938802083332689108 L 13.06875000000000142109 203.15157552083331893300 L 13.06875000000000142109 263.70345052083331438553 L 13.28656249999998806288 263.48563802083333484916 L 11.97968750000000071054 263.48563802083333484916 L 12.19749999999998912870 263.70345052083331438553 Z M 11.97968750000000071054 263.92126302083329392190 L 13.28656249999998806288 263.92126302083329392190 L 13.50437499999999246825 263.92126302083329392190 L 13.50437499999999246825 263.70345052083331438553 L 13.50437499999999246825 203.15157552083331893300 L 13.50437499999999246825 202.93376302083331097492 L 13.28656249999998806288 202.93376302083331097492 L 11.97968750000000071054 202.93376302083331097492 L 11.76187499999999808153 202.93376302083331097492 L 11.76187499999999808153 203.15157552083331893300 L 11.76187499999999808153 263.70345052083331438553 L 11.76187499999999808153 263.92126302083329392190 L 11.97968750000000071054 263.92126302083329392190 Z ' ), new Shape( 'M 6.53437500000000071054 223.68040364583333712289 A 2.17812500000000008882 2.17812500000000008882 0 0 1 8.71250000000000035527 221.50227864583334280724 L 16.55374999999998664180 221.50227864583331438553 A 2.17812500000000008882 2.17812500000000008882 0 0 1 18.73187499999998806288 223.68040364583333712289 L 18.73187499999998806288 228.03665364583332575421 A 2.17812500000000008882 2.17812500000000008882 0 0 1 16.55374999999998664180 230.21477864583332006987 L 8.71250000000000035527 230.21477864583332006987 A 2.17812500000000008882 2.17812500000000008882 0 0 1 6.53437500000000071054 228.03665364583332575421 L 6.53437500000000071054 223.68040364583333712289 Z ' ), new Shape( 'M 6.75218749999999978684 223.68040364583333712289 A 1.96031250000000012434 1.96031250000000012434 0 0 1 8.71250000000000035527 221.72009114583335076532 L 16.55374999999998664180 221.72009114583332234361 A 1.96031250000000012434 1.96031250000000012434 0 0 1 18.51406249999998721023 223.68040364583333712289 L 18.51406250000000142109 228.03665364583332575421 A 1.96031250000000012434 1.96031250000000012434 0 0 1 16.55374999999998664180 229.99696614583331211179 L 8.71250000000000035527 229.99696614583331211179 A 1.96031250000000012434 1.96031250000000012434 0 0 1 6.75218749999999978684 228.03665364583332575421 L 6.75218749999998824052 223.68040364583333712289 Z M 6.31656249999999719336 223.68040364583333712289 L 6.31656249999999719336 228.03665364583332575421 A 2.39593750000000049738 2.39593750000000049738 0 0 0 8.71250000000000035527 230.43259114583332802795 L 16.55374999999998664180 230.43259114583332802795 A 2.39593750000000049738 2.39593750000000049738 0 0 0 18.94968749999998891553 228.03665364583332575421 L 18.94968749999999246825 223.68040364583333712289 A 2.39593750000000049738 2.39593750000000049738 0 0 0 16.55374999999998664180 221.28446614583333484916 L 8.71250000000000035527 221.28446614583333484916 A 2.39593750000000049738 2.39593750000000049738 0 0 0 6.31656249999999985789 223.68040364583333712289 Z ' ), new Shape( 'M 4.13843749999999666045 232.61071614583332234361 L 4.13843749999999666045 219.10634114583331211179 L 21.12781249999999388933 219.10634114583331211179 L 21.12781249999999388933 232.61071614583332234361 L 4.13843749999999666045 232.61071614583332234361 Z ' ), new Shape( 'M 7.84124999999998806288 226.07634114583333939663 L 17.42500000000000071054 226.07634114583333939663 L 17.42500000000000071054 225.64071614583332348047 L 7.84124999999998806288 225.64071614583332348047 L 7.84124999999998806288 226.07634114583333939663 Z ' ), new Shape( 'M 17.96953124999999218403 196.50829427083331779613 A 1.74250000000000038192 1.74250000000000038192 0 0 1 16.22703124999999246825 198.25079427083332461734 L 9.03921874999999630518 198.25079427083332461734 A 1.74250000000000038192 1.74250000000000038192 0 0 1 7.29671874999999570122 196.50829427083331779613 L 7.29671874999998859579 189.32048177083331097492 A 1.74250000000000038192 1.74250000000000038192 0 0 1 9.03921874999999630518 187.57798177083330415371 L 16.22703124999999246825 187.57798177083333257542 A 1.74250000000000038192 1.74250000000000038192 0 0 1 17.96953124999999218403 189.32048177083331097492 L 17.96953125000000284217 196.50829427083331779613 Z ' ), new Shape( 'M 17.86062499999999175770 196.50829427083331779613 A 1.63359375000000017764 1.63359375000000017764 0 0 1 16.22703124999999246825 198.14188802083330642745 L 9.03921874999999630518 198.14188802083333484916 A 1.63359375000000017764 1.63359375000000017764 0 0 1 7.40562499999999612754 196.50829427083331779613 L 7.40562499999999701572 189.32048177083331097492 A 1.63359375000000017764 1.63359375000000017764 0 0 1 9.03921874999999630518 187.68688802083332234361 L 16.22703124999999246825 187.68688802083332234361 A 1.63359375000000017764 1.63359375000000017764 0 0 1 17.86062499999999175770 189.32048177083331097492 L 17.86062499999999175770 196.50829427083331779613 Z M 18.07843749999999261036 196.50829427083331779613 L 18.07843749999999261036 189.32048177083331097492 A 1.85140625000000036415 1.85140625000000036415 0 0 0 16.22703124999999246825 187.46907552083331438553 L 9.03921874999999630518 187.46907552083331438553 A 1.85140625000000036415 1.85140625000000036415 0 0 0 7.18781249999999616307 189.32048177083331097492 L 7.18781249999999438671 196.50829427083331779613 A 1.85140625000000036415 1.85140625000000036415 0 0 0 9.03921874999999630518 198.35970052083331438553 L 16.22703124999999246825 198.35970052083331438553 A 1.85140625000000036415 1.85140625000000036415 0 0 0 18.07843749999999261036 196.50829427083331779613 Z ' ), new Shape( 'M 17.96953124999999218403 196.50829427083331779613 A 1.74250000000000038192 1.74250000000000038192 0 0 1 16.22703124999999246825 198.25079427083332461734 L 9.03921874999999630518 198.25079427083332461734 A 1.74250000000000038192 1.74250000000000038192 0 0 1 7.29671874999999570122 196.50829427083331779613 L 7.29671874999998859579 189.32048177083331097492 A 1.74250000000000038192 1.74250000000000038192 0 0 1 9.03921874999999630518 187.57798177083330415371 L 16.22703124999999246825 187.57798177083333257542 A 1.74250000000000038192 1.74250000000000038192 0 0 1 17.96953124999999218403 189.32048177083331097492 L 17.96953125000000284217 196.50829427083331779613 Z ' ), new Shape( 'M 17.20718749999999985789 187.46907552083331438553 A 0.87125000000000019096 0.87125000000000019096 0 0 1 18.07843749999999971578 188.34032552083331779613 L 18.07843749999999261036 197.48845052083331097492 A 0.87125000000000019096 0.87125000000000019096 0 0 1 17.20718749999999985789 198.35970052083331438553 L 8.05906249999999069189 198.35970052083331438553 A 0.87125000000000019096 0.87125000000000019096 0 0 1 7.18781249999999083400 197.48845052083331097492 L 7.18781249999999438671 188.34032552083331779613 A 0.87125000000000019096 0.87125000000000019096 0 0 1 8.05906249999999069189 187.46907552083331438553 L 17.20718749999999985789 187.46907552083331438553 Z ' ) ];

  Shape.union( shapes );

  assert.expect( 0 );
} );

QUnit.test( 'stroked line 1', assert => {

  const a = Shape.deserialize( {
    type: 'Shape',
    subpaths: [ {
      type: 'Subpath',
      segments: [ {
        type: 'Line',
        startX: 580,
        startY: 372,
        endX: 580,
        endY: 155.69419920487314
      }, {
        type: 'Arc',
        centerX: 570,
        centerY: 155.69419920487314,
        radius: 10,
        startAngle: 0,
        endAngle: -3.141592653589793,
        anticlockwise: true
      }, { type: 'Line', startX: 560, startY: 155.69419920487314, endX: 560, endY: 372 }, {
        type: 'Arc',
        centerX: 570,
        centerY: 372,
        radius: 10,
        startAngle: 3.141592653589793,
        endAngle: 0,
        anticlockwise: true
      } ],
      points: [ { x: 580, y: 372 }, { x: 580, y: 155.69419920487314 }, {
        x: 560,
        y: 155.69419920487314
      }, { x: 560, y: 372 }, { x: 580, y: 372 } ],
      closed: true
    } ]
  } );
  const b = Shape.deserialize( {
    type: 'Shape',
    subpaths: [ {
      type: 'Subpath',
      segments: [ {
        type: 'Line',
        startX: 570,
        startY: 145.69419920487314,
        endX: 348.3058007951268,
        endY: 145.69419920487314
      }, {
        type: 'Arc',
        centerX: 348.3058007951268,
        centerY: 155.69419920487314,
        radius: 10,
        startAngle: 4.71238898038469,
        endAngle: 1.5707963267948966,
        anticlockwise: true
      }, {
        type: 'Line',
        startX: 348.3058007951268,
        startY: 165.69419920487314,
        endX: 570,
        endY: 165.69419920487314
      }, {
        type: 'Arc',
        centerX: 570,
        centerY: 155.69419920487314,
        radius: 10,
        startAngle: 1.5707963267948966,
        endAngle: -1.5707963267948966,
        anticlockwise: true
      } ],
      points: [ { x: 570, y: 145.69419920487314 }, {
        x: 348.3058007951268,
        y: 145.69419920487314
      }, { x: 348.3058007951268, y: 165.69419920487314 }, { x: 570, y: 165.69419920487314 }, {
        x: 570,
        y: 145.69419920487314
      } ],
      closed: true
    } ]
  } );

  testUnion( assert, a, b, 1, 'stroked line 1 union' );
} );

QUnit.test( 'Shared endpoint test', assert => {
  const a = Shape.deserialize( {
    type: 'Shape',
    subpaths: [
      {
        type: 'Subpath',
        segments: [
          {
            type: 'Line',
            startX: 293.1293439302738,
            startY: 314.4245163440668,
            endX: 288.8867032431545,
            endY: 321.21274144345773
          },
          {
            type: 'Line',
            startX: 288.8867032431545,
            startY: 321.21274144345773,
            endX: 283.3712703498995,
            endY: 326.7281743367127
          },
          {
            type: 'Line',
            startX: 283.3712703498995,
            startY: 326.7281743367127,
            endX: 280.8256859376279,
            endY: 324.1825899244411
          },
          {
            type: 'Line',
            startX: 280.8256859376279,
            startY: 324.1825899244411,
            endX: 286.3411188308829,
            endY: 318.66715703118615
          },
          {
            type: 'Line',
            startX: 286.3411188308829,
            startY: 318.66715703118615,
            endX: 293.1293439302738,
            endY: 314.4245163440668
          }
        ],
        points: [ { x: 293.1293439302738, y: 314.4245163440668 }, {
          x: 288.8867032431545,
          y: 321.21274144345773
        }, { x: 283.3712703498995, y: 326.7281743367127 }, {
          x: 280.8256859376279,
          y: 324.1825899244411
        }, { x: 286.3411188308829, y: 318.66715703118615 }, { x: 293.1293439302738, y: 314.4245163440668 } ],
        closed: true
      }, {
        type: 'Subpath',
        segments: [],
        points: [ { x: 293.1293439302738, y: 314.4245163440668 } ],
        closed: false
      } ]
  } );
  const b = Shape.deserialize( {
    type: 'Shape', subpaths: [
      {
        type: 'Subpath',
        segments: [
          {
            type: 'Line',
            startX: 296,
            startY: 272.7867965644035,
            endX: 447.21320343559637,
            endY: 272.7867965644035
          },
          {
            type: 'Line',
            startX: 447.21320343559637,
            startY: 272.7867965644035,
            endX: 447.21320343559637,
            endY: 278.7867965644035
          },
          {
            type: 'Line',
            startX: 447.21320343559637,
            startY: 278.7867965644035,
            endX: 404.7867965644035,
            endY: 321.2132034355964
          },
          {
            type: 'Line',
            startX: 404.7867965644035,
            startY: 321.2132034355964,
            endX: 284.7867965644036,
            endY: 321.2132034355964
          },
          {
            type: 'Line',
            startX: 284.7867965644036,
            startY: 321.2132034355964,
            endX: 284.7867965644036,
            endY: 315.2132034355964
          },
          {
            type: 'Line',
            startX: 284.7867965644036,
            startY: 315.2132034355964,
            endX: 296,
            endY: 272.7867965644035
          }
        ],
        points: [ { x: 296, y: 272.7867965644035 }, {
          x: 447.21320343559637,
          y: 272.7867965644035
        }, { x: 447.21320343559637, y: 278.7867965644035 }, {
          x: 404.7867965644035,
          y: 321.2132034355964
        }, { x: 284.7867965644036, y: 321.2132034355964 }, {
          x: 284.7867965644036,
          y: 315.2132034355964
        }, { x: 296, y: 272.7867965644035 } ],
        closed: true
      } ]
  } );
  testUnion( assert, a, b, 1, 'shared endpoint test 1' );
} );

QUnit.test( 'Line segment winding', assert => {
  const line = new Line( new Vector2( 0, 0 ), new Vector2( 2, 2 ) );

  assert.equal( line.windingIntersection( new Ray2( new Vector2( 0, 1 ), new Vector2( 1, 0 ) ) ), 1 );
  assert.equal( line.windingIntersection( new Ray2( new Vector2( 0, 5 ), new Vector2( 1, 0 ) ) ), 0 );
  assert.equal( line.windingIntersection( new Ray2( new Vector2( 1, 0 ), new Vector2( 0, 1 ) ) ), -1 );
  assert.equal( line.windingIntersection( new Ray2( new Vector2( 0, 0 ), new Vector2( 1, 1 ).normalized() ) ), 0 );
  assert.equal( line.windingIntersection( new Ray2( new Vector2( 0, 1 ), new Vector2( 1, 1 ).normalized() ) ), 0 );
} );

QUnit.test( 'Rectangle hit testing', assert => {
  const shape = Shape.rectangle( 0, 0, 1, 1 );

  assert.equal( shape.containsPoint( new Vector2( 0.2, 0.3 ) ), true, '0.2, 0.3' );
  assert.equal( shape.containsPoint( new Vector2( 0.5, 0.5 ) ), true, '0.5, 0.5' );
  assert.equal( shape.containsPoint( new Vector2( 1.5, 0.5 ) ), false, '1.5, 0.5' );
  assert.equal( shape.containsPoint( new Vector2( -0.5, 0.5 ) ), false, '-0.5, 0.5' );
} );

//See https://github.com/phetsims/kite/issues/34
QUnit.test( 'Trapezoid hit testing', assert => {
  const shape = new Shape( 'M 415 298.5 L 414.99999999999994 94.5 L 468.596798162286 101.08659447295564 L 468.59679816228606 291.91340552704435 Z' );
  assert.equal( shape.containsPoint( new Vector2( 441, 125 ) ), true, 'trapezoid should report that an interior point is "containsPoint" true' );
} );

QUnit.test( 'Un-closed shape hit testing', assert => {
  const shape = new Shape().moveTo( 0, 0 ).lineTo( 10, 10 ).lineTo( 0, 10 );

  assert.equal( shape.containsPoint( new Vector2( 1, 2 ) ), true, '1, 2' );
  assert.equal( shape.containsPoint( new Vector2( 10, 2 ) ), false, '10, 2' );
} );

QUnit.test( 'Zero-size rectangle', assert => {
  const shape = new Shape().rect( 20, 50, 0, 0 );

  assert.ok( shape.bounds.isFinite() || shape.bounds.isEmpty() ); // relies on the boundary case from dot
} );

QUnit.test( 'Zero-size line segment', assert => {
  const shape = new Shape().moveTo( 20, 50 ).lineTo( 20, 50 ).close();

  assert.ok( shape.bounds.isFinite() || shape.bounds.isEmpty() ); // relies on the boundary case from dot
} );

QUnit.test( 'Bucket hit region', assert => {
  const shape = new Shape().moveTo( -60, 0 )
    .lineTo( -48, 42 )
    .cubicCurveTo( -36, 51, 36, 51, 48, 42 )
    .lineTo( 60, 0 )
    .ellipticalArc( 0, 0, 60, 7.5, 0, 0, -Math.PI, false )
    .close();
  const point = new Vector2( -131.07772925764198, -274.65043668122274 );
  const ray = new Ray2( point, new Vector2( 1, 0 ) );

  assert.equal( 0, shape.windingIntersection( ray ), 'The winding intersection should be zero' );
} );

QUnit.test( 'intersectsBounds', assert => {
  assert.ok( !Shape.circle( 0, 0, 2 ).intersectsBounds( new Bounds2( -1, -1, 1, 1 ) ),
    'Circle surrounds the bounds but should not intersect' );
  assert.ok( Shape.circle( 0, 0, 1.3 ).intersectsBounds( new Bounds2( -1, -1, 1, 1 ) ),
    'Circle intersects the bounds' );
  assert.ok( Shape.circle( 0, 0, 0.9 ).intersectsBounds( new Bounds2( -1, -1, 1, 1 ) ),
    'Circle contained within the bounds' );
  assert.ok( ( new Shape() ).moveTo( -2, 0 ).lineTo( 2, 0 ).intersectsBounds( new Bounds2( -1, -1, 1, 1 ) ),
    'Line goes through bounds directly' );
  assert.ok( !( new Shape() ).moveTo( -2, 2 ).lineTo( 2, 2 ).intersectsBounds( new Bounds2( -1, -1, 1, 1 ) ),
    'Line goes above bounds' );
} );

QUnit.test( 'interiorIntersectsLineSegment', assert => {
  const circle = Shape.circle( 0, 0, 10 ); // radius 10 at 0,0

  assert.ok( circle.interiorIntersectsLineSegment( new Vector2( -1, 0 ), new Vector2( 1, 0 ) ),
    'Fully contained' );
  assert.ok( !circle.interiorIntersectsLineSegment( new Vector2( -100, 0 ), new Vector2( -50, 0 ) ),
    'Outside with ray towards circle' );
  assert.ok( !circle.interiorIntersectsLineSegment( new Vector2( 50, 0 ), new Vector2( 100, 0 ) ),
    'Outside with ray away from circle' );
  assert.ok( circle.interiorIntersectsLineSegment( new Vector2( 100, 0 ), new Vector2( 0, 0 ) ),
    'Inside to outside (intersects)' );
  assert.ok( !circle.interiorIntersectsLineSegment( new Vector2( 100, 0 ), new Vector2( 0, 100 ) ),
    'Outside at an angle' );
  assert.ok( circle.interiorIntersectsLineSegment( new Vector2( 10.1, 0 ), new Vector2( 0, 10.1 ) ),
    'Glancing with two intersection points' );
} );

QUnit.test( 'Cubic overlap', assert => {
  const cubic = new Cubic( new Vector2( 0, 0 ), new Vector2( 0, 3 ), new Vector2( 10, 7 ), new Vector2( 10, 9 ) );
  const otherCubic = new Cubic( new Vector2( 10, 0 ), new Vector2( 0, 3 ), new Vector2( 10, 7 ), new Vector2( 10, 9 ) );

  const selfTest = Cubic.getOverlaps( cubic, cubic )[ 0 ];
  assert.equal( selfTest.a, 1, 'selfTest.a' );
  assert.equal( selfTest.b, 0, 'selfTest.b' );

  const firstHalf = cubic.subdivided( 0.5 )[ 0 ];
  const firstTest = Cubic.getOverlaps( cubic, firstHalf )[ 0 ];
  assert.equal( firstTest.a, 2, 'firstTest.a' );
  assert.equal( firstTest.b, 0, 'firstTest.b' );
  assert.ok( cubic.positionAt( 0.25 ).distance( firstHalf.positionAt( 0.25 * firstTest.a + firstTest.b ) ) < 1e-6, 'firstHalf t=0.25 check' );

  const secondHalf = cubic.subdivided( 0.5 )[ 1 ];
  const secondTest = Cubic.getOverlaps( cubic, secondHalf )[ 0 ];
  assert.equal( secondTest.a, 2, 'secondTest.a' );
  assert.equal( secondTest.b, -1, 'secondTest.b' );
  assert.ok( cubic.positionAt( 0.75 ).distance( secondHalf.positionAt( 0.75 * secondTest.a + secondTest.b ) ) < 1e-6, 'secondHalf t=0.75 check' );

  const negativeTest = Cubic.getOverlaps( cubic, otherCubic );
  assert.equal( negativeTest.length, 0, 'negativeTest' );
} );

QUnit.test( 'Quadratic overlap', assert => {
  const quadratic = new Quadratic( new Vector2( 0, 0 ), new Vector2( 0, 3 ), new Vector2( 10, 9 ) );
  const otherQuadratic = new Quadratic( new Vector2( 10, 0 ), new Vector2( 0, 3 ), new Vector2( 10, 9 ) );

  const selfTest = Quadratic.getOverlaps( quadratic, quadratic )[ 0 ];
  assert.equal( selfTest.a, 1, 'selfTest.a' );
  assert.equal( selfTest.b, 0, 'selfTest.b' );

  const firstHalf = quadratic.subdivided( 0.5 )[ 0 ];
  const firstTest = Quadratic.getOverlaps( quadratic, firstHalf )[ 0 ];
  assert.equal( firstTest.a, 2, 'firstTest.a' );
  assert.equal( firstTest.b, 0, 'firstTest.b' );
  assert.ok( quadratic.positionAt( 0.25 ).distance( firstHalf.positionAt( 0.25 * firstTest.a + firstTest.b ) ) < 1e-6, 'firstHalf t=0.25 check' );

  const secondHalf = quadratic.subdivided( 0.5 )[ 1 ];
  const secondTest = Quadratic.getOverlaps( quadratic, secondHalf )[ 0 ];
  assert.equal( secondTest.a, 2, 'secondTest.a' );
  assert.equal( secondTest.b, -1, 'secondTest.b' );
  assert.ok( quadratic.positionAt( 0.75 ).distance( secondHalf.positionAt( 0.75 * secondTest.a + secondTest.b ) ) < 1e-6, 'secondHalf t=0.75 check' );

  const negativeTest = Quadratic.getOverlaps( quadratic, otherQuadratic );
  assert.equal( negativeTest.length, 0, 'negativeTest' );
} );

QUnit.test( 'Linear overlap', assert => {
  const line = new Line( new Vector2( 0, 0 ), new Vector2( 10, 9 ) );
  const otherLine = new Line( new Vector2( 10, 0 ), new Vector2( 10, 9 ) );

  const selfTest = Line.getOverlaps( line, line )[ 0 ];
  assert.equal( selfTest.a, 1, 'selfTest.a' );
  assert.equal( selfTest.b, 0, 'selfTest.b' );

  const firstHalf = line.subdivided( 0.5 )[ 0 ];
  const firstTest = Line.getOverlaps( line, firstHalf )[ 0 ];
  assert.equal( firstTest.a, 2, 'firstTest.a' );
  assert.equal( firstTest.b, 0, 'firstTest.b' );
  assert.ok( line.positionAt( 0.25 ).distance( firstHalf.positionAt( 0.25 * firstTest.a + firstTest.b ) ) < 1e-6, 'firstHalf t=0.25 check' );

  const secondHalf = line.subdivided( 0.5 )[ 1 ];
  const secondTest = Line.getOverlaps( line, secondHalf )[ 0 ];
  assert.equal( secondTest.a, 2, 'secondTest.a' );
  assert.equal( secondTest.b, -1, 'secondTest.b' );
  assert.ok( line.positionAt( 0.75 ).distance( secondHalf.positionAt( 0.75 * secondTest.a + secondTest.b ) ) < 1e-6, 'secondHalf t=0.75 check' );

  const negativeTest = Line.getOverlaps( line, otherLine );
  assert.equal( negativeTest.length, 0, 'negativeTest' );
} );

QUnit.test( 'Closure of common Shape commands', assert => {
  assert.ok( new Shape().circle( 0, 0, 10 ).subpaths[ 0 ].closed, 'circle should result in a closed subpath' );
  assert.ok( new Shape().ellipse( 0, 0, 10, 20, Math.PI / 4 ).subpaths[ 0 ].closed, 'ellipse should result in a closed subpath' );
  assert.ok( new Shape().rect( 0, 0, 100, 50 ).subpaths[ 0 ].closed, 'rect should result in a closed subpath' );
  assert.ok( new Shape().roundRect( 0, 0, 100, 50, 3, 4 ).subpaths[ 0 ].closed, 'roundRect should result in a closed subpath' );
  assert.ok( new Shape().polygon( [ new Vector2( 0, 0 ), new Vector2( 10, 0 ), new Vector2( 0, 10 ) ] ).subpaths[ 0 ].closed, 'polygon should result in a closed subpath' );
  assert.ok( Shape.regularPolygon( 6, 10 ).subpaths[ 0 ].closed, 'regularPolygon should result in a closed subpath' );
} );

QUnit.test( 'Circle-circle intersection', assert => {
  // Accuracy assertions are contained in the intersection function

  assert.equal( Arc.getCircleIntersectionPoint( new Vector2( 0, 0 ), 10, new Vector2( 20, 0 ), 10 ).length, 1, 'two 10-radii adjacent' );
  assert.equal( Arc.getCircleIntersectionPoint( new Vector2( 0, 0 ), 10, new Vector2( 21, 0 ), 10 ).length, 0, 'two 10-radii separated' );
  assert.equal( Arc.getCircleIntersectionPoint( new Vector2( 0, 0 ), 10, new Vector2( 30, 0 ), 20 ).length, 1, 'two 20-radii adjacent' );
  assert.equal( Arc.getCircleIntersectionPoint( new Vector2( 0, 0 ), 10, new Vector2( 31, 0 ), 20 ).length, 0, 'two 20-radii separated' );
  assert.equal( Arc.getCircleIntersectionPoint( new Vector2( 0, 0 ), 10, new Vector2( 0, 0 ), 8 ).length, 0, 'inner center' );
  assert.equal( Arc.getCircleIntersectionPoint( new Vector2( 0, 0 ), 10, new Vector2( 1, 0 ), 5 ).length, 0, 'inner offset' );
  assert.equal( Arc.getCircleIntersectionPoint( new Vector2( 0, 0 ), 10, new Vector2( 5, 0 ), 5 ).length, 1, 'inner touching' );

  function r() {
    const randomSource = Math.random; // (We can't get joist's random reference here)
    return Math.ceil( randomSource() * 20 );
  }

  for ( let i = 0; i < 200; i++ ) {
    Arc.getCircleIntersectionPoint( new Vector2( r(), r() ), r(), new Vector2( r(), r() ), r() );
  }
} );

QUnit.test( 'Close linear overlap', assert => {
  const a = new Line( new Vector2( 0, 0 ), new Vector2( 6.123233995736766e-16, -10 ) );
  const b = new Line( new Vector2( -1.8369701987210296e-15, -10 ), new Vector2( 0, 0 ) );

  assert.ok( Line.getOverlaps( a, b ).length === 1, 'Should find one continuous overlap' );
} );

QUnit.test( 'Partial ellipse overlap union', assert => {
  const a = new Shape();
  const b = new Shape();

  a.ellipticalArc( 50, 50, 30, 50, 0.124, 0, Math.PI, false ).close();
  b.ellipticalArc( 50, 50, 30, 50, 0.124, Math.PI * 0.5, Math.PI * 2, false ).close();

  testUnion( assert, a, b, 1, 'Partial ellipse union' );
} );

QUnit.test( 'Elliptical overlaps', assert => {
  const a = new EllipticalArc( Vector2.ZERO, 60, 40, 0, 0, Math.PI, false );
  const b = new EllipticalArc( Vector2.ZERO, 60, 40, 0, 0.5 * Math.PI, 1.5 * Math.PI, false );
  const c = new EllipticalArc( Vector2.ZERO, 40, 60, -Math.PI / 2, 0, 2 * Math.PI, false );
  const d = new EllipticalArc( Vector2.ZERO, 60, 40, 0, 0.8 * Math.PI, 2.2 * Math.PI, false );

  assert.equal( EllipticalArc.getOverlaps( a, b ).length, 1, 'Normal partial overlap' );
  assert.equal( EllipticalArc.getOverlaps( a, c ).length, 1, 'Overlap with opposite rotation' );
  assert.equal( EllipticalArc.getOverlaps( a, d ).length, 2, 'Double overlap' );
} );

QUnit.test( 'Elliptical intersection at origin', assert => {
  const a = new EllipticalArc( new Vector2( 20, 0 ), 20, 30, 0, 0.9 * Math.PI, 1.1 * Math.PI, false );
  const b = new EllipticalArc( new Vector2( 0, 20 ), 30, 20, 0, 1.4 * Math.PI, 1.6 * Math.PI, false );

  const intersections = EllipticalArc.intersect( a, b );

  assert.equal( intersections.length, 1, 'Single intersection' );
  if ( intersections.length ) {
    assert.ok( intersections[ 0 ].point.equalsEpsilon( Vector2.ZERO, 1e-10 ), 'Intersection at 0' );
  }
} );

QUnit.test( 'Elliptical intersection when split', assert => {
  const arc = new EllipticalArc( new Vector2( 20, 0 ), 20, 30, 0, 0.3 * Math.PI, 1.1 * Math.PI, false );
  const subarcs = arc.subdivided( 0.5 );

  const intersections = EllipticalArc.intersect( subarcs[ 0 ], subarcs[ 1 ] );

  assert.equal( intersections.length, 1, 'Single intersection' );
} );
